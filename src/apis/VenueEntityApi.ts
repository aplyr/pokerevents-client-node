/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VenueEntity,
} from '../models/index';
import {
    VenueEntityFromJSON,
    VenueEntityToJSON,
} from '../models/index';

export interface CreateVenueEntityRequest {
    venueEntity: VenueEntity;
}

export interface DeleteVenueEntityRequest {
    id: string;
}

export interface GetVenueEntityByIdRequest {
    id: string;
}

export interface UpdateVenueEntityRequest {
    id: string;
    venueEntity: VenueEntity;
}

/**
 * 
 */
export class VenueEntityApi extends runtime.BaseAPI {

    /**
     */
    async createVenueEntityRaw(requestParameters: CreateVenueEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueEntity>> {
        if (requestParameters['venueEntity'] == null) {
            throw new runtime.RequiredError(
                'venueEntity',
                'Required parameter "venueEntity" was null or undefined when calling createVenueEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/VenueEntity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueEntityToJSON(requestParameters['venueEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueEntityFromJSON(jsonValue));
    }

    /**
     */
    async createVenueEntity(requestParameters: CreateVenueEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueEntity> {
        const response = await this.createVenueEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteVenueEntityRaw(requestParameters: DeleteVenueEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteVenueEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/VenueEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteVenueEntity(requestParameters: DeleteVenueEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVenueEntityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllVenueEntitiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VenueEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/VenueEntity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VenueEntityFromJSON));
    }

    /**
     */
    async getAllVenueEntities(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VenueEntity>> {
        const response = await this.getAllVenueEntitiesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getVenueEntityByIdRaw(requestParameters: GetVenueEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVenueEntityById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/VenueEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueEntityFromJSON(jsonValue));
    }

    /**
     */
    async getVenueEntityById(requestParameters: GetVenueEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueEntity> {
        const response = await this.getVenueEntityByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateVenueEntityRaw(requestParameters: UpdateVenueEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateVenueEntity().'
            );
        }

        if (requestParameters['venueEntity'] == null) {
            throw new runtime.RequiredError(
                'venueEntity',
                'Required parameter "venueEntity" was null or undefined when calling updateVenueEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/VenueEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueEntityToJSON(requestParameters['venueEntity']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateVenueEntity(requestParameters: UpdateVenueEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateVenueEntityRaw(requestParameters, initOverrides);
    }

}
