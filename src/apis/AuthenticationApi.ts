/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessTokenResponse,
  ForgotPasswordRequest,
  HttpValidationProblemDetails,
  InfoRequest,
  InfoResponse,
  LoginRequest,
  RefreshRequest,
  RegisterRequest,
  ResendConfirmationEmailRequest,
  ResetPasswordRequest,
  TwoFactorRequest,
  TwoFactorResponse,
} from '../models/index';
import {
    AccessTokenResponseFromJSON,
    AccessTokenResponseToJSON,
    ForgotPasswordRequestFromJSON,
    ForgotPasswordRequestToJSON,
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    InfoRequestFromJSON,
    InfoRequestToJSON,
    InfoResponseFromJSON,
    InfoResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    RefreshRequestFromJSON,
    RefreshRequestToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    ResendConfirmationEmailRequestFromJSON,
    ResendConfirmationEmailRequestToJSON,
    ResetPasswordRequestFromJSON,
    ResetPasswordRequestToJSON,
    TwoFactorRequestFromJSON,
    TwoFactorRequestToJSON,
    TwoFactorResponseFromJSON,
    TwoFactorResponseToJSON,
} from '../models/index';

export interface ApiAuthenticationForgotPasswordPostRequest {
    forgotPasswordRequest?: ForgotPasswordRequest;
}

export interface ApiAuthenticationLoginPostRequest {
    useCookies?: boolean;
    useSessionCookies?: boolean;
    loginRequest?: LoginRequest;
}

export interface ApiAuthenticationManage2faPostRequest {
    twoFactorRequest?: TwoFactorRequest;
}

export interface ApiAuthenticationManageInfoPostRequest {
    infoRequest?: InfoRequest;
}

export interface ApiAuthenticationRefreshPostRequest {
    refreshRequest?: RefreshRequest;
}

export interface ApiAuthenticationRegisterPostRequest {
    registerRequest?: RegisterRequest;
}

export interface ApiAuthenticationResendConfirmationEmailPostRequest {
    resendConfirmationEmailRequest?: ResendConfirmationEmailRequest;
}

export interface ApiAuthenticationResetPasswordPostRequest {
    resetPasswordRequest?: ResetPasswordRequest;
}

export interface MapIdentityApiApiAuthenticationConfirmEmailRequest {
    userId?: string;
    code?: string;
    changedEmail?: string;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     */
    async apiAuthenticationForgotPasswordPostRaw(requestParameters: ApiAuthenticationForgotPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/forgotPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotPasswordRequestToJSON(requestParameters['forgotPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthenticationForgotPasswordPost(requestParameters: ApiAuthenticationForgotPasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthenticationForgotPasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuthenticationLoginPostRaw(requestParameters: ApiAuthenticationLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        const queryParameters: any = {};

        if (requestParameters['useCookies'] != null) {
            queryParameters['useCookies'] = requestParameters['useCookies'];
        }

        if (requestParameters['useSessionCookies'] != null) {
            queryParameters['useSessionCookies'] = requestParameters['useSessionCookies'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationLoginPost(requestParameters: ApiAuthenticationLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokenResponse> {
        const response = await this.apiAuthenticationLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthenticationLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthenticationLogoutPostRaw(initOverrides);
    }

    /**
     */
    async apiAuthenticationManage2faPostRaw(requestParameters: ApiAuthenticationManage2faPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwoFactorResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/manage/2fa`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TwoFactorRequestToJSON(requestParameters['twoFactorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwoFactorResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationManage2faPost(requestParameters: ApiAuthenticationManage2faPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwoFactorResponse> {
        const response = await this.apiAuthenticationManage2faPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationManageInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/manage/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationManageInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoResponse> {
        const response = await this.apiAuthenticationManageInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationManageInfoPostRaw(requestParameters: ApiAuthenticationManageInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/manage/info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InfoRequestToJSON(requestParameters['infoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationManageInfoPost(requestParameters: ApiAuthenticationManageInfoPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoResponse> {
        const response = await this.apiAuthenticationManageInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationRefreshPostRaw(requestParameters: ApiAuthenticationRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshRequestToJSON(requestParameters['refreshRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationRefreshPost(requestParameters: ApiAuthenticationRefreshPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokenResponse> {
        const response = await this.apiAuthenticationRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationRegisterPostRaw(requestParameters: ApiAuthenticationRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthenticationRegisterPost(requestParameters: ApiAuthenticationRegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthenticationRegisterPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuthenticationResendConfirmationEmailPostRaw(requestParameters: ApiAuthenticationResendConfirmationEmailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/resendConfirmationEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendConfirmationEmailRequestToJSON(requestParameters['resendConfirmationEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthenticationResendConfirmationEmailPost(requestParameters: ApiAuthenticationResendConfirmationEmailPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthenticationResendConfirmationEmailPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuthenticationResetPasswordPostRaw(requestParameters: ApiAuthenticationResetPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/resetPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordRequestToJSON(requestParameters['resetPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthenticationResetPasswordPost(requestParameters: ApiAuthenticationResetPasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthenticationResetPasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mapIdentityApiApiAuthenticationConfirmEmailRaw(requestParameters: MapIdentityApiApiAuthenticationConfirmEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['changedEmail'] != null) {
            queryParameters['changedEmail'] = requestParameters['changedEmail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/confirmEmail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mapIdentityApiApiAuthenticationConfirmEmail(requestParameters: MapIdentityApiApiAuthenticationConfirmEmailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mapIdentityApiApiAuthenticationConfirmEmailRaw(requestParameters, initOverrides);
    }

}
