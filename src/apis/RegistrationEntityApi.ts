/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RegistrationDetailedDto,
  RegistrationEntity,
} from '../models/index';
import {
    RegistrationDetailedDtoFromJSON,
    RegistrationDetailedDtoToJSON,
    RegistrationEntityFromJSON,
    RegistrationEntityToJSON,
} from '../models/index';

export interface CreateRegistrationEntityRequest {
    registrationEntity: RegistrationEntity;
}

export interface DeleteRegistrationEntityRequest {
    id: string;
}

export interface GetAllRegistrationEntitiesRequest {
    eventId: string;
}

export interface GetRegistrationEntityByIdRequest {
    id: string;
}

export interface UpdateRegistrationEntityRequest {
    id: string;
    registrationEntity: RegistrationEntity;
}

/**
 * 
 */
export class RegistrationEntityApi extends runtime.BaseAPI {

    /**
     */
    async createRegistrationEntityRaw(requestParameters: CreateRegistrationEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegistrationEntity>> {
        if (requestParameters['registrationEntity'] == null) {
            throw new runtime.RequiredError(
                'registrationEntity',
                'Required parameter "registrationEntity" was null or undefined when calling createRegistrationEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/RegistrationEntity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrationEntityToJSON(requestParameters['registrationEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationEntityFromJSON(jsonValue));
    }

    /**
     */
    async createRegistrationEntity(requestParameters: CreateRegistrationEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationEntity> {
        const response = await this.createRegistrationEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteRegistrationEntityRaw(requestParameters: DeleteRegistrationEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRegistrationEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/RegistrationEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRegistrationEntity(requestParameters: DeleteRegistrationEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRegistrationEntityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllRegistrationEntitiesRaw(requestParameters: GetAllRegistrationEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RegistrationDetailedDto>>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getAllRegistrationEntities().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['eventId'] != null) {
            queryParameters['eventId'] = requestParameters['eventId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/RegistrationEntity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RegistrationDetailedDtoFromJSON));
    }

    /**
     */
    async getAllRegistrationEntities(requestParameters: GetAllRegistrationEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RegistrationDetailedDto>> {
        const response = await this.getAllRegistrationEntitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRegistrationEntityByIdRaw(requestParameters: GetRegistrationEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegistrationEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRegistrationEntityById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/RegistrationEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationEntityFromJSON(jsonValue));
    }

    /**
     */
    async getRegistrationEntityById(requestParameters: GetRegistrationEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationEntity> {
        const response = await this.getRegistrationEntityByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRegistrationEntityRaw(requestParameters: UpdateRegistrationEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateRegistrationEntity().'
            );
        }

        if (requestParameters['registrationEntity'] == null) {
            throw new runtime.RequiredError(
                'registrationEntity',
                'Required parameter "registrationEntity" was null or undefined when calling updateRegistrationEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/RegistrationEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrationEntityToJSON(requestParameters['registrationEntity']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateRegistrationEntity(requestParameters: UpdateRegistrationEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateRegistrationEntityRaw(requestParameters, initOverrides);
    }

}
