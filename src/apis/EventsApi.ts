/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChipCountUpdateDto,
  EventBasicDetailsRequest,
  EventDetailsDto,
  EventMetaDto,
  EventStatisticsDto,
  EventSummaryDto,
  LiveReportingBasicDetailsRequest,
  LiveReportingDetailsDto,
  ProblemDetails,
  RegistrationRequest,
  Result,
} from '../models/index';
import {
    ChipCountUpdateDtoFromJSON,
    ChipCountUpdateDtoToJSON,
    EventBasicDetailsRequestFromJSON,
    EventBasicDetailsRequestToJSON,
    EventDetailsDtoFromJSON,
    EventDetailsDtoToJSON,
    EventMetaDtoFromJSON,
    EventMetaDtoToJSON,
    EventStatisticsDtoFromJSON,
    EventStatisticsDtoToJSON,
    EventSummaryDtoFromJSON,
    EventSummaryDtoToJSON,
    LiveReportingBasicDetailsRequestFromJSON,
    LiveReportingBasicDetailsRequestToJSON,
    LiveReportingDetailsDtoFromJSON,
    LiveReportingDetailsDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RegistrationRequestFromJSON,
    RegistrationRequestToJSON,
    ResultFromJSON,
    ResultToJSON,
} from '../models/index';

export interface ApiEventsEventIdChipCountsPostRequest {
    eventId: string;
    chipCountUpdateDto?: Array<ChipCountUpdateDto>;
}

export interface ApiEventsEventIdDeleteRequest {
    eventId: string;
}

export interface ApiEventsEventIdGetRequest {
    eventId: string;
}

export interface ApiEventsEventIdLiveReportingsPostRequest {
    eventId: string;
    liveReportingBasicDetailsRequest?: LiveReportingBasicDetailsRequest;
}

export interface ApiEventsEventIdMetaPutRequest {
    eventId: string;
    eventMetaDto?: EventMetaDto;
}

export interface ApiEventsEventIdPutRequest {
    eventId: string;
    eventBasicDetailsRequest?: EventBasicDetailsRequest;
}

export interface ApiEventsEventIdRegistrationsPostRequest {
    eventId: string;
    registrationRequest?: Array<RegistrationRequest>;
}

export interface ApiEventsEventIdStatisticsPutRequest {
    eventId: string;
    eventStatisticsDto?: EventStatisticsDto;
}

export interface ApiEventsGetRequest {
    pageSize?: number;
    page?: number;
    festivalId?: string;
}

export interface ApiEventsPostRequest {
    eventBasicDetailsRequest?: EventBasicDetailsRequest;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     */
    async apiEventsEventIdChipCountsPostRaw(requestParameters: ApiEventsEventIdChipCountsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling apiEventsEventIdChipCountsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Events/{eventId}/ChipCounts`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['chipCountUpdateDto']!.map(ChipCountUpdateDtoToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiEventsEventIdChipCountsPost(requestParameters: ApiEventsEventIdChipCountsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiEventsEventIdChipCountsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiEventsEventIdDeleteRaw(requestParameters: ApiEventsEventIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling apiEventsEventIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Events/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiEventsEventIdDelete(requestParameters: ApiEventsEventIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiEventsEventIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiEventsEventIdGetRaw(requestParameters: ApiEventsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDetailsDto>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling apiEventsEventIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Events/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiEventsEventIdGet(requestParameters: ApiEventsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDetailsDto> {
        const response = await this.apiEventsEventIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEventsEventIdLiveReportingsPostRaw(requestParameters: ApiEventsEventIdLiveReportingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveReportingDetailsDto>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling apiEventsEventIdLiveReportingsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Events/{eventId}/LiveReportings`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LiveReportingBasicDetailsRequestToJSON(requestParameters['liveReportingBasicDetailsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveReportingDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiEventsEventIdLiveReportingsPost(requestParameters: ApiEventsEventIdLiveReportingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveReportingDetailsDto> {
        const response = await this.apiEventsEventIdLiveReportingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEventsEventIdMetaPutRaw(requestParameters: ApiEventsEventIdMetaPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling apiEventsEventIdMetaPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Events/{eventId}/Meta`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventMetaDtoToJSON(requestParameters['eventMetaDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiEventsEventIdMetaPut(requestParameters: ApiEventsEventIdMetaPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiEventsEventIdMetaPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiEventsEventIdPutRaw(requestParameters: ApiEventsEventIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling apiEventsEventIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Events/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventBasicDetailsRequestToJSON(requestParameters['eventBasicDetailsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiEventsEventIdPut(requestParameters: ApiEventsEventIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiEventsEventIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiEventsEventIdRegistrationsPostRaw(requestParameters: ApiEventsEventIdRegistrationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling apiEventsEventIdRegistrationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Events/{eventId}/Registrations`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['registrationRequest']!.map(RegistrationRequestToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiEventsEventIdRegistrationsPost(requestParameters: ApiEventsEventIdRegistrationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiEventsEventIdRegistrationsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiEventsEventIdStatisticsPutRaw(requestParameters: ApiEventsEventIdStatisticsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling apiEventsEventIdStatisticsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Events/{eventId}/Statistics`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventStatisticsDtoToJSON(requestParameters['eventStatisticsDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiEventsEventIdStatisticsPut(requestParameters: ApiEventsEventIdStatisticsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiEventsEventIdStatisticsPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiEventsGetRaw(requestParameters: ApiEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EventSummaryDto>>> {
        const queryParameters: any = {};

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['festivalId'] != null) {
            queryParameters['festivalId'] = requestParameters['festivalId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventSummaryDtoFromJSON));
    }

    /**
     */
    async apiEventsGet(requestParameters: ApiEventsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EventSummaryDto>> {
        const response = await this.apiEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEventsPostRaw(requestParameters: ApiEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDetailsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventBasicDetailsRequestToJSON(requestParameters['eventBasicDetailsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiEventsPost(requestParameters: ApiEventsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDetailsDto> {
        const response = await this.apiEventsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
