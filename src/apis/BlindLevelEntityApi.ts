/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlindLevelEntity,
} from '../models/index';
import {
    BlindLevelEntityFromJSON,
    BlindLevelEntityToJSON,
} from '../models/index';

export interface CreateBlindLevelEntityRequest {
    blindLevelEntity: BlindLevelEntity;
}

export interface CreateBlindLevelEntityBatchRequest {
    blindLevelEntity: Array<BlindLevelEntity>;
}

export interface DeleteBlindLevelEntityRequest {
    id: string;
}

export interface GetAllBlindLevelEntitiesRequest {
    eventId?: string;
}

export interface GetBlindLevelEntityByIdRequest {
    id: string;
}

export interface UpdateBlindLevelEntityRequest {
    id: string;
    blindLevelEntity: BlindLevelEntity;
}

/**
 * 
 */
export class BlindLevelEntityApi extends runtime.BaseAPI {

    /**
     */
    async createBlindLevelEntityRaw(requestParameters: CreateBlindLevelEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlindLevelEntity>> {
        if (requestParameters['blindLevelEntity'] == null) {
            throw new runtime.RequiredError(
                'blindLevelEntity',
                'Required parameter "blindLevelEntity" was null or undefined when calling createBlindLevelEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/BlindLevelEntity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlindLevelEntityToJSON(requestParameters['blindLevelEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlindLevelEntityFromJSON(jsonValue));
    }

    /**
     */
    async createBlindLevelEntity(requestParameters: CreateBlindLevelEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlindLevelEntity> {
        const response = await this.createBlindLevelEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createBlindLevelEntityBatchRaw(requestParameters: CreateBlindLevelEntityBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['blindLevelEntity'] == null) {
            throw new runtime.RequiredError(
                'blindLevelEntity',
                'Required parameter "blindLevelEntity" was null or undefined when calling createBlindLevelEntityBatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/BlindLevelEntity/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['blindLevelEntity']!.map(BlindLevelEntityToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createBlindLevelEntityBatch(requestParameters: CreateBlindLevelEntityBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createBlindLevelEntityBatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteBlindLevelEntityRaw(requestParameters: DeleteBlindLevelEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteBlindLevelEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/BlindLevelEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteBlindLevelEntity(requestParameters: DeleteBlindLevelEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBlindLevelEntityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllBlindLevelEntitiesRaw(requestParameters: GetAllBlindLevelEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlindLevelEntity>>> {
        const queryParameters: any = {};

        if (requestParameters['eventId'] != null) {
            queryParameters['eventId'] = requestParameters['eventId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/BlindLevelEntity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlindLevelEntityFromJSON));
    }

    /**
     */
    async getAllBlindLevelEntities(requestParameters: GetAllBlindLevelEntitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlindLevelEntity>> {
        const response = await this.getAllBlindLevelEntitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBlindLevelEntityByIdRaw(requestParameters: GetBlindLevelEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlindLevelEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBlindLevelEntityById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/BlindLevelEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlindLevelEntityFromJSON(jsonValue));
    }

    /**
     */
    async getBlindLevelEntityById(requestParameters: GetBlindLevelEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlindLevelEntity> {
        const response = await this.getBlindLevelEntityByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateBlindLevelEntityRaw(requestParameters: UpdateBlindLevelEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateBlindLevelEntity().'
            );
        }

        if (requestParameters['blindLevelEntity'] == null) {
            throw new runtime.RequiredError(
                'blindLevelEntity',
                'Required parameter "blindLevelEntity" was null or undefined when calling updateBlindLevelEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/BlindLevelEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlindLevelEntityToJSON(requestParameters['blindLevelEntity']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateBlindLevelEntity(requestParameters: UpdateBlindLevelEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateBlindLevelEntityRaw(requestParameters, initOverrides);
    }

}
