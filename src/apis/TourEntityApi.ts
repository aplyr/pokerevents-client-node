/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TourEntity,
} from '../models/index';
import {
    TourEntityFromJSON,
    TourEntityToJSON,
} from '../models/index';

export interface CreateTourEntityRequest {
    tourEntity: TourEntity;
}

export interface DeleteTourEntityRequest {
    id: string;
}

export interface GetTourEntityByIdRequest {
    id: string;
}

export interface UpdateTourEntityRequest {
    id: string;
    tourEntity: TourEntity;
}

/**
 * 
 */
export class TourEntityApi extends runtime.BaseAPI {

    /**
     */
    async createTourEntityRaw(requestParameters: CreateTourEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TourEntity>> {
        if (requestParameters['tourEntity'] == null) {
            throw new runtime.RequiredError(
                'tourEntity',
                'Required parameter "tourEntity" was null or undefined when calling createTourEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/TourEntity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TourEntityToJSON(requestParameters['tourEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TourEntityFromJSON(jsonValue));
    }

    /**
     */
    async createTourEntity(requestParameters: CreateTourEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TourEntity> {
        const response = await this.createTourEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTourEntityRaw(requestParameters: DeleteTourEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTourEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/TourEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTourEntity(requestParameters: DeleteTourEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTourEntityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllTourEntitiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TourEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/TourEntity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TourEntityFromJSON));
    }

    /**
     */
    async getAllTourEntities(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TourEntity>> {
        const response = await this.getAllTourEntitiesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getTourEntityByIdRaw(requestParameters: GetTourEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TourEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTourEntityById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/TourEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TourEntityFromJSON(jsonValue));
    }

    /**
     */
    async getTourEntityById(requestParameters: GetTourEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TourEntity> {
        const response = await this.getTourEntityByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTourEntityRaw(requestParameters: UpdateTourEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTourEntity().'
            );
        }

        if (requestParameters['tourEntity'] == null) {
            throw new runtime.RequiredError(
                'tourEntity',
                'Required parameter "tourEntity" was null or undefined when calling updateTourEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/TourEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TourEntityToJSON(requestParameters['tourEntity']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateTourEntity(requestParameters: UpdateTourEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTourEntityRaw(requestParameters, initOverrides);
    }

}
