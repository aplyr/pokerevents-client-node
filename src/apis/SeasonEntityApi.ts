/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SeasonEntity,
} from '../models/index';
import {
    SeasonEntityFromJSON,
    SeasonEntityToJSON,
} from '../models/index';

export interface CreateSeasonEntityRequest {
    seasonEntity: SeasonEntity;
}

export interface DeleteSeasonEntityRequest {
    id: string;
}

export interface GetAllSeasonEntitiesRequest {
    tourId?: string;
}

export interface GetSeasonEntityByIdRequest {
    id: string;
}

export interface UpdateSeasonEntityRequest {
    id: string;
    seasonEntity: SeasonEntity;
}

/**
 * 
 */
export class SeasonEntityApi extends runtime.BaseAPI {

    /**
     */
    async createSeasonEntityRaw(requestParameters: CreateSeasonEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeasonEntity>> {
        if (requestParameters['seasonEntity'] == null) {
            throw new runtime.RequiredError(
                'seasonEntity',
                'Required parameter "seasonEntity" was null or undefined when calling createSeasonEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/SeasonEntity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeasonEntityToJSON(requestParameters['seasonEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonEntityFromJSON(jsonValue));
    }

    /**
     */
    async createSeasonEntity(requestParameters: CreateSeasonEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeasonEntity> {
        const response = await this.createSeasonEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSeasonEntityRaw(requestParameters: DeleteSeasonEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSeasonEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/SeasonEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteSeasonEntity(requestParameters: DeleteSeasonEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSeasonEntityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllSeasonEntitiesRaw(requestParameters: GetAllSeasonEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SeasonEntity>>> {
        const queryParameters: any = {};

        if (requestParameters['tourId'] != null) {
            queryParameters['tourId'] = requestParameters['tourId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/SeasonEntity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SeasonEntityFromJSON));
    }

    /**
     */
    async getAllSeasonEntities(requestParameters: GetAllSeasonEntitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SeasonEntity>> {
        const response = await this.getAllSeasonEntitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSeasonEntityByIdRaw(requestParameters: GetSeasonEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeasonEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSeasonEntityById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/SeasonEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonEntityFromJSON(jsonValue));
    }

    /**
     */
    async getSeasonEntityById(requestParameters: GetSeasonEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeasonEntity> {
        const response = await this.getSeasonEntityByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSeasonEntityRaw(requestParameters: UpdateSeasonEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSeasonEntity().'
            );
        }

        if (requestParameters['seasonEntity'] == null) {
            throw new runtime.RequiredError(
                'seasonEntity',
                'Required parameter "seasonEntity" was null or undefined when calling updateSeasonEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/SeasonEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SeasonEntityToJSON(requestParameters['seasonEntity']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateSeasonEntity(requestParameters: UpdateSeasonEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSeasonEntityRaw(requestParameters, initOverrides);
    }

}
