/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DayEntity,
} from '../models/index';
import {
    DayEntityFromJSON,
    DayEntityToJSON,
} from '../models/index';

export interface CreateDayEntityRequest {
    dayEntity: DayEntity;
}

export interface DeleteDayEntityRequest {
    id: string;
}

export interface GetAllDayEntitiesRequest {
    eventId?: string;
}

export interface GetDayEntityByIdRequest {
    id: string;
}

export interface UpdateDayEntityRequest {
    id: string;
    dayEntity: DayEntity;
}

/**
 * 
 */
export class DayEntityApi extends runtime.BaseAPI {

    /**
     */
    async createDayEntityRaw(requestParameters: CreateDayEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayEntity>> {
        if (requestParameters['dayEntity'] == null) {
            throw new runtime.RequiredError(
                'dayEntity',
                'Required parameter "dayEntity" was null or undefined when calling createDayEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/DayEntity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DayEntityToJSON(requestParameters['dayEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayEntityFromJSON(jsonValue));
    }

    /**
     */
    async createDayEntity(requestParameters: CreateDayEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayEntity> {
        const response = await this.createDayEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteDayEntityRaw(requestParameters: DeleteDayEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDayEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/DayEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteDayEntity(requestParameters: DeleteDayEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDayEntityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllDayEntitiesRaw(requestParameters: GetAllDayEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DayEntity>>> {
        const queryParameters: any = {};

        if (requestParameters['eventId'] != null) {
            queryParameters['eventId'] = requestParameters['eventId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/DayEntity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DayEntityFromJSON));
    }

    /**
     */
    async getAllDayEntities(requestParameters: GetAllDayEntitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DayEntity>> {
        const response = await this.getAllDayEntitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDayEntityByIdRaw(requestParameters: GetDayEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDayEntityById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/DayEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayEntityFromJSON(jsonValue));
    }

    /**
     */
    async getDayEntityById(requestParameters: GetDayEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayEntity> {
        const response = await this.getDayEntityByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateDayEntityRaw(requestParameters: UpdateDayEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateDayEntity().'
            );
        }

        if (requestParameters['dayEntity'] == null) {
            throw new runtime.RequiredError(
                'dayEntity',
                'Required parameter "dayEntity" was null or undefined when calling updateDayEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/DayEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DayEntityToJSON(requestParameters['dayEntity']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateDayEntity(requestParameters: UpdateDayEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateDayEntityRaw(requestParameters, initOverrides);
    }

}
