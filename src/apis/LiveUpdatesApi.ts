/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LiveUpdateDto,
  LiveUpdateRequest,
  Result,
} from '../models/index';
import {
    LiveUpdateDtoFromJSON,
    LiveUpdateDtoToJSON,
    LiveUpdateRequestFromJSON,
    LiveUpdateRequestToJSON,
    ResultFromJSON,
    ResultToJSON,
} from '../models/index';

export interface ApiLiveUpdatesGetRequest {
    liveReportingId?: string;
}

export interface ApiLiveUpdatesLiveUpdateIdDeleteRequest {
    liveUpdateId: string;
}

export interface ApiLiveUpdatesLiveUpdateIdGetRequest {
    liveUpdateId: string;
}

export interface ApiLiveUpdatesLiveUpdateIdPutRequest {
    liveUpdateId: string;
    liveUpdateRequest?: LiveUpdateRequest;
}

export interface ApiLiveUpdatesPostRequest {
    liveReportingId?: string;
    liveUpdateRequest?: LiveUpdateRequest;
}

/**
 * 
 */
export class LiveUpdatesApi extends runtime.BaseAPI {

    /**
     */
    async apiLiveUpdatesGetRaw(requestParameters: ApiLiveUpdatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LiveUpdateDto>>> {
        const queryParameters: any = {};

        if (requestParameters['liveReportingId'] != null) {
            queryParameters['liveReportingId'] = requestParameters['liveReportingId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/LiveUpdates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LiveUpdateDtoFromJSON));
    }

    /**
     */
    async apiLiveUpdatesGet(requestParameters: ApiLiveUpdatesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LiveUpdateDto>> {
        const response = await this.apiLiveUpdatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLiveUpdatesLiveUpdateIdDeleteRaw(requestParameters: ApiLiveUpdatesLiveUpdateIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['liveUpdateId'] == null) {
            throw new runtime.RequiredError(
                'liveUpdateId',
                'Required parameter "liveUpdateId" was null or undefined when calling apiLiveUpdatesLiveUpdateIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/LiveUpdates/{liveUpdateId}`.replace(`{${"liveUpdateId"}}`, encodeURIComponent(String(requestParameters['liveUpdateId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLiveUpdatesLiveUpdateIdDelete(requestParameters: ApiLiveUpdatesLiveUpdateIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLiveUpdatesLiveUpdateIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLiveUpdatesLiveUpdateIdGetRaw(requestParameters: ApiLiveUpdatesLiveUpdateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveUpdateDto>> {
        if (requestParameters['liveUpdateId'] == null) {
            throw new runtime.RequiredError(
                'liveUpdateId',
                'Required parameter "liveUpdateId" was null or undefined when calling apiLiveUpdatesLiveUpdateIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/LiveUpdates/{liveUpdateId}`.replace(`{${"liveUpdateId"}}`, encodeURIComponent(String(requestParameters['liveUpdateId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveUpdateDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiLiveUpdatesLiveUpdateIdGet(requestParameters: ApiLiveUpdatesLiveUpdateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveUpdateDto> {
        const response = await this.apiLiveUpdatesLiveUpdateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLiveUpdatesLiveUpdateIdPutRaw(requestParameters: ApiLiveUpdatesLiveUpdateIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['liveUpdateId'] == null) {
            throw new runtime.RequiredError(
                'liveUpdateId',
                'Required parameter "liveUpdateId" was null or undefined when calling apiLiveUpdatesLiveUpdateIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/LiveUpdates/{liveUpdateId}`.replace(`{${"liveUpdateId"}}`, encodeURIComponent(String(requestParameters['liveUpdateId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LiveUpdateRequestToJSON(requestParameters['liveUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLiveUpdatesLiveUpdateIdPut(requestParameters: ApiLiveUpdatesLiveUpdateIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLiveUpdatesLiveUpdateIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLiveUpdatesPostRaw(requestParameters: ApiLiveUpdatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveUpdateDto>> {
        const queryParameters: any = {};

        if (requestParameters['liveReportingId'] != null) {
            queryParameters['liveReportingId'] = requestParameters['liveReportingId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/LiveUpdates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LiveUpdateRequestToJSON(requestParameters['liveUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveUpdateDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiLiveUpdatesPost(requestParameters: ApiLiveUpdatesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveUpdateDto> {
        const response = await this.apiLiveUpdatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
