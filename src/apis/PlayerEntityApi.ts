/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PlayerEntity,
} from '../models/index';
import {
    PlayerEntityFromJSON,
    PlayerEntityToJSON,
} from '../models/index';

export interface CreatePlayerEntityRequest {
    playerEntity: PlayerEntity;
}

export interface DeletePlayerEntityRequest {
    id: string;
}

export interface GetAllPlayerEntitiesRequest {
    pageSize?: number;
    page?: number;
    q?: string;
    eventId?: string;
}

export interface GetPlayerEntityByIdRequest {
    id: string;
}

export interface UpdatePlayerEntityRequest {
    id: string;
    playerEntity: PlayerEntity;
}

/**
 * 
 */
export class PlayerEntityApi extends runtime.BaseAPI {

    /**
     */
    async createPlayerEntityRaw(requestParameters: CreatePlayerEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerEntity>> {
        if (requestParameters['playerEntity'] == null) {
            throw new runtime.RequiredError(
                'playerEntity',
                'Required parameter "playerEntity" was null or undefined when calling createPlayerEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/PlayerEntity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlayerEntityToJSON(requestParameters['playerEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerEntityFromJSON(jsonValue));
    }

    /**
     */
    async createPlayerEntity(requestParameters: CreatePlayerEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerEntity> {
        const response = await this.createPlayerEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePlayerEntityRaw(requestParameters: DeletePlayerEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePlayerEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/PlayerEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePlayerEntity(requestParameters: DeletePlayerEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePlayerEntityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllPlayerEntitiesRaw(requestParameters: GetAllPlayerEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlayerEntity>>> {
        const queryParameters: any = {};

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['eventId'] != null) {
            queryParameters['eventId'] = requestParameters['eventId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/PlayerEntity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlayerEntityFromJSON));
    }

    /**
     */
    async getAllPlayerEntities(requestParameters: GetAllPlayerEntitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlayerEntity>> {
        const response = await this.getAllPlayerEntitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPlayerEntityByIdRaw(requestParameters: GetPlayerEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPlayerEntityById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/PlayerEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerEntityFromJSON(jsonValue));
    }

    /**
     */
    async getPlayerEntityById(requestParameters: GetPlayerEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerEntity> {
        const response = await this.getPlayerEntityByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePlayerEntityRaw(requestParameters: UpdatePlayerEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePlayerEntity().'
            );
        }

        if (requestParameters['playerEntity'] == null) {
            throw new runtime.RequiredError(
                'playerEntity',
                'Required parameter "playerEntity" was null or undefined when calling updatePlayerEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/PlayerEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlayerEntityToJSON(requestParameters['playerEntity']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updatePlayerEntity(requestParameters: UpdatePlayerEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePlayerEntityRaw(requestParameters, initOverrides);
    }

}
