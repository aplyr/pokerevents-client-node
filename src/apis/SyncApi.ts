/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ThmSyncRequest,
  ThmSyncResult,
} from '../models/index';
import {
    ThmSyncRequestFromJSON,
    ThmSyncRequestToJSON,
    ThmSyncResultFromJSON,
    ThmSyncResultToJSON,
} from '../models/index';

export interface ApiSyncFestivalsFestivalIdSyncEventsPostRequest {
    festivalId: string;
    refresh?: boolean;
}

export interface ApiSyncSeasonsSeasonIdSyncFestivalsPostRequest {
    seasonId: string;
    refresh?: boolean;
}

export interface ApiSyncSyncToursPostRequest {
    refresh?: boolean;
    thmSyncRequest?: ThmSyncRequest;
}

export interface ApiSyncSyncVenuesPostRequest {
    thmSyncRequest?: ThmSyncRequest;
}

export interface ApiSyncToursTourIdSyncSeasonsPostRequest {
    tourId: string;
    refresh?: boolean;
}

/**
 * 
 */
export class SyncApi extends runtime.BaseAPI {

    /**
     */
    async apiSyncFestivalsFestivalIdSyncEventsPostRaw(requestParameters: ApiSyncFestivalsFestivalIdSyncEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThmSyncResult>> {
        if (requestParameters['festivalId'] == null) {
            throw new runtime.RequiredError(
                'festivalId',
                'Required parameter "festivalId" was null or undefined when calling apiSyncFestivalsFestivalIdSyncEventsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['refresh'] != null) {
            queryParameters['refresh'] = requestParameters['refresh'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Sync/festivals/{festivalId}/sync-events`.replace(`{${"festivalId"}}`, encodeURIComponent(String(requestParameters['festivalId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThmSyncResultFromJSON(jsonValue));
    }

    /**
     */
    async apiSyncFestivalsFestivalIdSyncEventsPost(requestParameters: ApiSyncFestivalsFestivalIdSyncEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThmSyncResult> {
        const response = await this.apiSyncFestivalsFestivalIdSyncEventsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSyncSeasonsSeasonIdSyncFestivalsPostRaw(requestParameters: ApiSyncSeasonsSeasonIdSyncFestivalsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThmSyncResult>> {
        if (requestParameters['seasonId'] == null) {
            throw new runtime.RequiredError(
                'seasonId',
                'Required parameter "seasonId" was null or undefined when calling apiSyncSeasonsSeasonIdSyncFestivalsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['refresh'] != null) {
            queryParameters['refresh'] = requestParameters['refresh'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Sync/seasons/{seasonId}/sync-festivals`.replace(`{${"seasonId"}}`, encodeURIComponent(String(requestParameters['seasonId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThmSyncResultFromJSON(jsonValue));
    }

    /**
     */
    async apiSyncSeasonsSeasonIdSyncFestivalsPost(requestParameters: ApiSyncSeasonsSeasonIdSyncFestivalsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThmSyncResult> {
        const response = await this.apiSyncSeasonsSeasonIdSyncFestivalsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSyncSyncToursPostRaw(requestParameters: ApiSyncSyncToursPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThmSyncResult>> {
        const queryParameters: any = {};

        if (requestParameters['refresh'] != null) {
            queryParameters['refresh'] = requestParameters['refresh'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Sync/sync-tours`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThmSyncRequestToJSON(requestParameters['thmSyncRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThmSyncResultFromJSON(jsonValue));
    }

    /**
     */
    async apiSyncSyncToursPost(requestParameters: ApiSyncSyncToursPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThmSyncResult> {
        const response = await this.apiSyncSyncToursPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSyncSyncVenuesPostRaw(requestParameters: ApiSyncSyncVenuesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThmSyncResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Sync/sync-venues`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThmSyncRequestToJSON(requestParameters['thmSyncRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThmSyncResultFromJSON(jsonValue));
    }

    /**
     */
    async apiSyncSyncVenuesPost(requestParameters: ApiSyncSyncVenuesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThmSyncResult> {
        const response = await this.apiSyncSyncVenuesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSyncToursTourIdSyncSeasonsPostRaw(requestParameters: ApiSyncToursTourIdSyncSeasonsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThmSyncResult>> {
        if (requestParameters['tourId'] == null) {
            throw new runtime.RequiredError(
                'tourId',
                'Required parameter "tourId" was null or undefined when calling apiSyncToursTourIdSyncSeasonsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['refresh'] != null) {
            queryParameters['refresh'] = requestParameters['refresh'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Sync/tours/{tourId}/sync-seasons`.replace(`{${"tourId"}}`, encodeURIComponent(String(requestParameters['tourId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThmSyncResultFromJSON(jsonValue));
    }

    /**
     */
    async apiSyncToursTourIdSyncSeasonsPost(requestParameters: ApiSyncToursTourIdSyncSeasonsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThmSyncResult> {
        const response = await this.apiSyncToursTourIdSyncSeasonsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
