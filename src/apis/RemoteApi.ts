/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TourDto,
  VenueDto,
} from '../models/index';
import {
    TourDtoFromJSON,
    TourDtoToJSON,
    VenueDtoFromJSON,
    VenueDtoToJSON,
} from '../models/index';

export interface ApiRemoteVenuesGetRequest {
    page?: number;
}

/**
 * 
 */
export class RemoteApi extends runtime.BaseAPI {

    /**
     */
    async apiRemoteToursGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TourDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Remote/tours`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TourDtoFromJSON));
    }

    /**
     */
    async apiRemoteToursGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TourDto>> {
        const response = await this.apiRemoteToursGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRemoteVenuesGetRaw(requestParameters: ApiRemoteVenuesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VenueDto>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/Remote/venues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VenueDtoFromJSON));
    }

    /**
     */
    async apiRemoteVenuesGet(requestParameters: ApiRemoteVenuesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VenueDto>> {
        const response = await this.apiRemoteVenuesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
