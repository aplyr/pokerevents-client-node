/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LiveReportingBasicDetailsRequest,
  LiveReportingDetailsDto,
  LiveReportingStatisticsDto,
  LiveReportingSummaryDto,
  LiveUpdateDto,
  LiveUpdateRequest,
  Result,
} from '../models/index';
import {
    LiveReportingBasicDetailsRequestFromJSON,
    LiveReportingBasicDetailsRequestToJSON,
    LiveReportingDetailsDtoFromJSON,
    LiveReportingDetailsDtoToJSON,
    LiveReportingStatisticsDtoFromJSON,
    LiveReportingStatisticsDtoToJSON,
    LiveReportingSummaryDtoFromJSON,
    LiveReportingSummaryDtoToJSON,
    LiveUpdateDtoFromJSON,
    LiveUpdateDtoToJSON,
    LiveUpdateRequestFromJSON,
    LiveUpdateRequestToJSON,
    ResultFromJSON,
    ResultToJSON,
} from '../models/index';

export interface ApiLiveReportingsGetRequest {
    eventId?: string;
}

export interface ApiLiveReportingsLiveReportingIdDeleteRequest {
    liveReportingId: string;
}

export interface ApiLiveReportingsLiveReportingIdLiveUpdatesPostRequest {
    liveReportingId: string;
    liveUpdateRequest?: LiveUpdateRequest;
}

export interface ApiLiveReportingsLiveReportingIdPutRequest {
    liveReportingId: string;
    liveReportingBasicDetailsRequest?: LiveReportingBasicDetailsRequest;
}

export interface ApiLiveReportingsLiveReportingIdStatisticsPutRequest {
    liveReportingId: string;
    liveReportingStatisticsDto?: LiveReportingStatisticsDto;
}

export interface GetLiveReportingRequest {
    liveReportingId: string;
}

/**
 * 
 */
export class LiveReportingsApi extends runtime.BaseAPI {

    /**
     */
    async apiLiveReportingsGetRaw(requestParameters: ApiLiveReportingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LiveReportingSummaryDto>>> {
        const queryParameters: any = {};

        if (requestParameters['eventId'] != null) {
            queryParameters['eventId'] = requestParameters['eventId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/LiveReportings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LiveReportingSummaryDtoFromJSON));
    }

    /**
     */
    async apiLiveReportingsGet(requestParameters: ApiLiveReportingsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LiveReportingSummaryDto>> {
        const response = await this.apiLiveReportingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLiveReportingsLiveReportingIdDeleteRaw(requestParameters: ApiLiveReportingsLiveReportingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['liveReportingId'] == null) {
            throw new runtime.RequiredError(
                'liveReportingId',
                'Required parameter "liveReportingId" was null or undefined when calling apiLiveReportingsLiveReportingIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/LiveReportings/{liveReportingId}`.replace(`{${"liveReportingId"}}`, encodeURIComponent(String(requestParameters['liveReportingId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLiveReportingsLiveReportingIdDelete(requestParameters: ApiLiveReportingsLiveReportingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLiveReportingsLiveReportingIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLiveReportingsLiveReportingIdLiveUpdatesPostRaw(requestParameters: ApiLiveReportingsLiveReportingIdLiveUpdatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveUpdateDto>> {
        if (requestParameters['liveReportingId'] == null) {
            throw new runtime.RequiredError(
                'liveReportingId',
                'Required parameter "liveReportingId" was null or undefined when calling apiLiveReportingsLiveReportingIdLiveUpdatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/LiveReportings/{liveReportingId}/LiveUpdates`.replace(`{${"liveReportingId"}}`, encodeURIComponent(String(requestParameters['liveReportingId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LiveUpdateRequestToJSON(requestParameters['liveUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveUpdateDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiLiveReportingsLiveReportingIdLiveUpdatesPost(requestParameters: ApiLiveReportingsLiveReportingIdLiveUpdatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveUpdateDto> {
        const response = await this.apiLiveReportingsLiveReportingIdLiveUpdatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLiveReportingsLiveReportingIdPutRaw(requestParameters: ApiLiveReportingsLiveReportingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['liveReportingId'] == null) {
            throw new runtime.RequiredError(
                'liveReportingId',
                'Required parameter "liveReportingId" was null or undefined when calling apiLiveReportingsLiveReportingIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/LiveReportings/{liveReportingId}`.replace(`{${"liveReportingId"}}`, encodeURIComponent(String(requestParameters['liveReportingId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LiveReportingBasicDetailsRequestToJSON(requestParameters['liveReportingBasicDetailsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLiveReportingsLiveReportingIdPut(requestParameters: ApiLiveReportingsLiveReportingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLiveReportingsLiveReportingIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLiveReportingsLiveReportingIdStatisticsPutRaw(requestParameters: ApiLiveReportingsLiveReportingIdStatisticsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['liveReportingId'] == null) {
            throw new runtime.RequiredError(
                'liveReportingId',
                'Required parameter "liveReportingId" was null or undefined when calling apiLiveReportingsLiveReportingIdStatisticsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/LiveReportings/{liveReportingId}/statistics`.replace(`{${"liveReportingId"}}`, encodeURIComponent(String(requestParameters['liveReportingId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LiveReportingStatisticsDtoToJSON(requestParameters['liveReportingStatisticsDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLiveReportingsLiveReportingIdStatisticsPut(requestParameters: ApiLiveReportingsLiveReportingIdStatisticsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLiveReportingsLiveReportingIdStatisticsPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getLiveReportingRaw(requestParameters: GetLiveReportingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveReportingDetailsDto>> {
        if (requestParameters['liveReportingId'] == null) {
            throw new runtime.RequiredError(
                'liveReportingId',
                'Required parameter "liveReportingId" was null or undefined when calling getLiveReporting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/LiveReportings/{liveReportingId}`.replace(`{${"liveReportingId"}}`, encodeURIComponent(String(requestParameters['liveReportingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveReportingDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getLiveReporting(requestParameters: GetLiveReportingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveReportingDetailsDto> {
        const response = await this.getLiveReportingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
