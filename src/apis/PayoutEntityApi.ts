/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PayoutDetailsDto,
  PayoutEntity,
} from '../models/index';
import {
    PayoutDetailsDtoFromJSON,
    PayoutDetailsDtoToJSON,
    PayoutEntityFromJSON,
    PayoutEntityToJSON,
} from '../models/index';

export interface CreatePayoutEntityRequest {
    payoutEntity: PayoutEntity;
}

export interface DeletePayoutEntityRequest {
    id: string;
}

export interface GetAllPayoutEntitiesRequest {
    eventId?: string;
}

export interface GetPayoutEntityByIdRequest {
    id: string;
}

export interface UpdatePayoutEntityRequest {
    id: string;
    payoutEntity: PayoutEntity;
}

/**
 * 
 */
export class PayoutEntityApi extends runtime.BaseAPI {

    /**
     */
    async createPayoutEntityRaw(requestParameters: CreatePayoutEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutEntity>> {
        if (requestParameters['payoutEntity'] == null) {
            throw new runtime.RequiredError(
                'payoutEntity',
                'Required parameter "payoutEntity" was null or undefined when calling createPayoutEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/PayoutEntity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayoutEntityToJSON(requestParameters['payoutEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayoutEntityFromJSON(jsonValue));
    }

    /**
     */
    async createPayoutEntity(requestParameters: CreatePayoutEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutEntity> {
        const response = await this.createPayoutEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePayoutEntityRaw(requestParameters: DeletePayoutEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePayoutEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/PayoutEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePayoutEntity(requestParameters: DeletePayoutEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePayoutEntityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllPayoutEntitiesRaw(requestParameters: GetAllPayoutEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PayoutDetailsDto>>> {
        const queryParameters: any = {};

        if (requestParameters['eventId'] != null) {
            queryParameters['eventId'] = requestParameters['eventId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/PayoutEntity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PayoutDetailsDtoFromJSON));
    }

    /**
     */
    async getAllPayoutEntities(requestParameters: GetAllPayoutEntitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PayoutDetailsDto>> {
        const response = await this.getAllPayoutEntitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPayoutEntityByIdRaw(requestParameters: GetPayoutEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPayoutEntityById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/PayoutEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayoutEntityFromJSON(jsonValue));
    }

    /**
     */
    async getPayoutEntityById(requestParameters: GetPayoutEntityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutEntity> {
        const response = await this.getPayoutEntityByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePayoutEntityRaw(requestParameters: UpdatePayoutEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePayoutEntity().'
            );
        }

        if (requestParameters['payoutEntity'] == null) {
            throw new runtime.RequiredError(
                'payoutEntity',
                'Required parameter "payoutEntity" was null or undefined when calling updatePayoutEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/api/PayoutEntity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PayoutEntityToJSON(requestParameters['payoutEntity']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updatePayoutEntity(requestParameters: UpdatePayoutEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePayoutEntityRaw(requestParameters, initOverrides);
    }

}
