/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BlindLevelDto } from './BlindLevelDto';
import {
    BlindLevelDtoFromJSON,
    BlindLevelDtoFromJSONTyped,
    BlindLevelDtoToJSON,
} from './BlindLevelDto';
import type { EventSummaryDto } from './EventSummaryDto';
import {
    EventSummaryDtoFromJSON,
    EventSummaryDtoFromJSONTyped,
    EventSummaryDtoToJSON,
} from './EventSummaryDto';
import type { LiveReportingStatisticsDto } from './LiveReportingStatisticsDto';
import {
    LiveReportingStatisticsDtoFromJSON,
    LiveReportingStatisticsDtoFromJSONTyped,
    LiveReportingStatisticsDtoToJSON,
} from './LiveReportingStatisticsDto';
import type { LiveUpdateDto } from './LiveUpdateDto';
import {
    LiveUpdateDtoFromJSON,
    LiveUpdateDtoFromJSONTyped,
    LiveUpdateDtoToJSON,
} from './LiveUpdateDto';
import type { PlayerSummaryDto } from './PlayerSummaryDto';
import {
    PlayerSummaryDtoFromJSON,
    PlayerSummaryDtoFromJSONTyped,
    PlayerSummaryDtoToJSON,
} from './PlayerSummaryDto';
import type { StateType } from './StateType';
import {
    StateTypeFromJSON,
    StateTypeFromJSONTyped,
    StateTypeToJSON,
} from './StateType';

/**
 * 
 * @export
 * @interface LiveReportingDetailsDto
 */
export interface LiveReportingDetailsDto {
    /**
     * 
     * @type {string}
     * @memberof LiveReportingDetailsDto
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof LiveReportingDetailsDto
     */
    eventId?: string;
    /**
     * 
     * @type {string}
     * @memberof LiveReportingDetailsDto
     */
    dayId?: string;
    /**
     * 
     * @type {string}
     * @memberof LiveReportingDetailsDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof LiveReportingDetailsDto
     */
    description?: string;
    /**
     * 
     * @type {StateType}
     * @memberof LiveReportingDetailsDto
     */
    state?: StateType;
    /**
     * 
     * @type {Date}
     * @memberof LiveReportingDetailsDto
     */
    startsAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof LiveReportingDetailsDto
     */
    finishedAt?: Date;
    /**
     * 
     * @type {LiveReportingStatisticsDto}
     * @memberof LiveReportingDetailsDto
     */
    statistics?: LiveReportingStatisticsDto;
    /**
     * 
     * @type {EventSummaryDto}
     * @memberof LiveReportingDetailsDto
     */
    event?: EventSummaryDto;
    /**
     * 
     * @type {Array<LiveUpdateDto>}
     * @memberof LiveReportingDetailsDto
     */
    liveUpdates?: Array<LiveUpdateDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof LiveReportingDetailsDto
     */
    readonly allTags?: Array<string>;
    /**
     * 
     * @type {Array<PlayerSummaryDto>}
     * @memberof LiveReportingDetailsDto
     */
    readonly allPlayers?: Array<PlayerSummaryDto>;
    /**
     * 
     * @type {Array<BlindLevelDto>}
     * @memberof LiveReportingDetailsDto
     */
    readonly allBlindLevels?: Array<BlindLevelDto>;
}

/**
 * Check if a given object implements the LiveReportingDetailsDto interface.
 */
export function instanceOfLiveReportingDetailsDto(value: object): boolean {
    return true;
}

export function LiveReportingDetailsDtoFromJSON(json: any): LiveReportingDetailsDto {
    return LiveReportingDetailsDtoFromJSONTyped(json, false);
}

export function LiveReportingDetailsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LiveReportingDetailsDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'eventId': json['eventId'] == null ? undefined : json['eventId'],
        'dayId': json['dayId'] == null ? undefined : json['dayId'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'state': json['state'] == null ? undefined : StateTypeFromJSON(json['state']),
        'startsAt': json['startsAt'] == null ? undefined : (new Date(json['startsAt'])),
        'finishedAt': json['finishedAt'] == null ? undefined : (new Date(json['finishedAt'])),
        'statistics': json['statistics'] == null ? undefined : LiveReportingStatisticsDtoFromJSON(json['statistics']),
        'event': json['event'] == null ? undefined : EventSummaryDtoFromJSON(json['event']),
        'liveUpdates': json['liveUpdates'] == null ? undefined : ((json['liveUpdates'] as Array<any>).map(LiveUpdateDtoFromJSON)),
        'allTags': json['allTags'] == null ? undefined : json['allTags'],
        'allPlayers': json['allPlayers'] == null ? undefined : ((json['allPlayers'] as Array<any>).map(PlayerSummaryDtoFromJSON)),
        'allBlindLevels': json['allBlindLevels'] == null ? undefined : ((json['allBlindLevels'] as Array<any>).map(BlindLevelDtoFromJSON)),
    };
}

export function LiveReportingDetailsDtoToJSON(value?: Omit<LiveReportingDetailsDto, 'allTags'|'allPlayers'|'allBlindLevels'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'eventId': value['eventId'],
        'dayId': value['dayId'],
        'name': value['name'],
        'description': value['description'],
        'state': StateTypeToJSON(value['state']),
        'startsAt': value['startsAt'] == null ? undefined : ((value['startsAt'] as any).toISOString()),
        'finishedAt': value['finishedAt'] == null ? undefined : ((value['finishedAt'] as any).toISOString()),
        'statistics': LiveReportingStatisticsDtoToJSON(value['statistics']),
        'event': EventSummaryDtoToJSON(value['event']),
        'liveUpdates': value['liveUpdates'] == null ? undefined : ((value['liveUpdates'] as Array<any>).map(LiveUpdateDtoToJSON)),
    };
}

