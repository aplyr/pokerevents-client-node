/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BlindLevelDto } from './BlindLevelDto';
import {
    BlindLevelDtoFromJSON,
    BlindLevelDtoFromJSONTyped,
    BlindLevelDtoToJSON,
} from './BlindLevelDto';

/**
 * 
 * @export
 * @interface LiveReportingStatisticsDto
 */
export interface LiveReportingStatisticsDto {
    /**
     * 
     * @type {number}
     * @memberof LiveReportingStatisticsDto
     */
    entries?: number;
    /**
     * 
     * @type {number}
     * @memberof LiveReportingStatisticsDto
     */
    reEntries?: number;
    /**
     * 
     * @type {number}
     * @memberof LiveReportingStatisticsDto
     */
    addOns?: number;
    /**
     * 
     * @type {number}
     * @memberof LiveReportingStatisticsDto
     */
    playersIn?: number;
    /**
     * 
     * @type {number}
     * @memberof LiveReportingStatisticsDto
     */
    totalChipCount?: number;
    /**
     * 
     * @type {number}
     * @memberof LiveReportingStatisticsDto
     */
    averageStack?: number;
    /**
     * 
     * @type {BlindLevelDto}
     * @memberof LiveReportingStatisticsDto
     */
    currentBlindLevel?: BlindLevelDto;
}

/**
 * Check if a given object implements the LiveReportingStatisticsDto interface.
 */
export function instanceOfLiveReportingStatisticsDto(value: object): boolean {
    return true;
}

export function LiveReportingStatisticsDtoFromJSON(json: any): LiveReportingStatisticsDto {
    return LiveReportingStatisticsDtoFromJSONTyped(json, false);
}

export function LiveReportingStatisticsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LiveReportingStatisticsDto {
    if (json == null) {
        return json;
    }
    return {
        
        'entries': json['entries'] == null ? undefined : json['entries'],
        'reEntries': json['reEntries'] == null ? undefined : json['reEntries'],
        'addOns': json['addOns'] == null ? undefined : json['addOns'],
        'playersIn': json['playersIn'] == null ? undefined : json['playersIn'],
        'totalChipCount': json['totalChipCount'] == null ? undefined : json['totalChipCount'],
        'averageStack': json['averageStack'] == null ? undefined : json['averageStack'],
        'currentBlindLevel': json['currentBlindLevel'] == null ? undefined : BlindLevelDtoFromJSON(json['currentBlindLevel']),
    };
}

export function LiveReportingStatisticsDtoToJSON(value?: LiveReportingStatisticsDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'entries': value['entries'],
        'reEntries': value['reEntries'],
        'addOns': value['addOns'],
        'playersIn': value['playersIn'],
        'totalChipCount': value['totalChipCount'],
        'averageStack': value['averageStack'],
        'currentBlindLevel': BlindLevelDtoToJSON(value['currentBlindLevel']),
    };
}

