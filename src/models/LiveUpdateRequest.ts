/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChipCountUpdateDto } from './ChipCountUpdateDto';
import {
    ChipCountUpdateDtoFromJSON,
    ChipCountUpdateDtoFromJSONTyped,
    ChipCountUpdateDtoToJSON,
} from './ChipCountUpdateDto';
import type { LiveUpdateState } from './LiveUpdateState';
import {
    LiveUpdateStateFromJSON,
    LiveUpdateStateFromJSONTyped,
    LiveUpdateStateToJSON,
} from './LiveUpdateState';
import type { LiveUpdateType } from './LiveUpdateType';
import {
    LiveUpdateTypeFromJSON,
    LiveUpdateTypeFromJSONTyped,
    LiveUpdateTypeToJSON,
} from './LiveUpdateType';
import type { PlayerSummaryDto } from './PlayerSummaryDto';
import {
    PlayerSummaryDtoFromJSON,
    PlayerSummaryDtoFromJSONTyped,
    PlayerSummaryDtoToJSON,
} from './PlayerSummaryDto';
import type { SectionDto } from './SectionDto';
import {
    SectionDtoFromJSON,
    SectionDtoFromJSONTyped,
    SectionDtoToJSON,
} from './SectionDto';

/**
 * 
 * @export
 * @interface LiveUpdateRequest
 */
export interface LiveUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof LiveUpdateRequest
     */
    blindLevelId?: string;
    /**
     * 
     * @type {string}
     * @memberof LiveUpdateRequest
     */
    title?: string;
    /**
     * 
     * @type {Date}
     * @memberof LiveUpdateRequest
     */
    recordedAt?: Date;
    /**
     * 
     * @type {LiveUpdateState}
     * @memberof LiveUpdateRequest
     */
    state?: LiveUpdateState;
    /**
     * 
     * @type {LiveUpdateType}
     * @memberof LiveUpdateRequest
     */
    type?: LiveUpdateType;
    /**
     * 
     * @type {any}
     * @memberof LiveUpdateRequest
     */
    content?: any;
    /**
     * 
     * @type {Array<SectionDto>}
     * @memberof LiveUpdateRequest
     */
    sections?: Array<SectionDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof LiveUpdateRequest
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<PlayerSummaryDto>}
     * @memberof LiveUpdateRequest
     */
    players?: Array<PlayerSummaryDto>;
    /**
     * 
     * @type {Array<ChipCountUpdateDto>}
     * @memberof LiveUpdateRequest
     */
    chipCounts?: Array<ChipCountUpdateDto>;
}

/**
 * Check if a given object implements the LiveUpdateRequest interface.
 */
export function instanceOfLiveUpdateRequest(value: object): boolean {
    return true;
}

export function LiveUpdateRequestFromJSON(json: any): LiveUpdateRequest {
    return LiveUpdateRequestFromJSONTyped(json, false);
}

export function LiveUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LiveUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'blindLevelId': json['blindLevelId'] == null ? undefined : json['blindLevelId'],
        'title': json['title'] == null ? undefined : json['title'],
        'recordedAt': json['recordedAt'] == null ? undefined : (new Date(json['recordedAt'])),
        'state': json['state'] == null ? undefined : LiveUpdateStateFromJSON(json['state']),
        'type': json['type'] == null ? undefined : LiveUpdateTypeFromJSON(json['type']),
        'content': json['content'] == null ? undefined : json['content'],
        'sections': json['sections'] == null ? undefined : ((json['sections'] as Array<any>).map(SectionDtoFromJSON)),
        'tags': json['tags'] == null ? undefined : json['tags'],
        'players': json['players'] == null ? undefined : ((json['players'] as Array<any>).map(PlayerSummaryDtoFromJSON)),
        'chipCounts': json['chipCounts'] == null ? undefined : ((json['chipCounts'] as Array<any>).map(ChipCountUpdateDtoFromJSON)),
    };
}

export function LiveUpdateRequestToJSON(value?: LiveUpdateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'blindLevelId': value['blindLevelId'],
        'title': value['title'],
        'recordedAt': value['recordedAt'] == null ? undefined : ((value['recordedAt'] as any).toISOString()),
        'state': LiveUpdateStateToJSON(value['state']),
        'type': LiveUpdateTypeToJSON(value['type']),
        'content': value['content'],
        'sections': value['sections'] == null ? undefined : ((value['sections'] as Array<any>).map(SectionDtoToJSON)),
        'tags': value['tags'],
        'players': value['players'] == null ? undefined : ((value['players'] as Array<any>).map(PlayerSummaryDtoToJSON)),
        'chipCounts': value['chipCounts'] == null ? undefined : ((value['chipCounts'] as Array<any>).map(ChipCountUpdateDtoToJSON)),
    };
}

