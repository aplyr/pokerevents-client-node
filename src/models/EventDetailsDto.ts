/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BlindLevelDto } from './BlindLevelDto';
import {
    BlindLevelDtoFromJSON,
    BlindLevelDtoFromJSONTyped,
    BlindLevelDtoToJSON,
} from './BlindLevelDto';
import type { DayEntity } from './DayEntity';
import {
    DayEntityFromJSON,
    DayEntityFromJSONTyped,
    DayEntityToJSON,
} from './DayEntity';
import type { EventMetaDto } from './EventMetaDto';
import {
    EventMetaDtoFromJSON,
    EventMetaDtoFromJSONTyped,
    EventMetaDtoToJSON,
} from './EventMetaDto';
import type { EventStatisticsDto } from './EventStatisticsDto';
import {
    EventStatisticsDtoFromJSON,
    EventStatisticsDtoFromJSONTyped,
    EventStatisticsDtoToJSON,
} from './EventStatisticsDto';
import type { FestivalDetailsDto } from './FestivalDetailsDto';
import {
    FestivalDetailsDtoFromJSON,
    FestivalDetailsDtoFromJSONTyped,
    FestivalDetailsDtoToJSON,
} from './FestivalDetailsDto';
import type { LiveReportingSummaryDto } from './LiveReportingSummaryDto';
import {
    LiveReportingSummaryDtoFromJSON,
    LiveReportingSummaryDtoFromJSONTyped,
    LiveReportingSummaryDtoToJSON,
} from './LiveReportingSummaryDto';
import type { PayoutDetailsDto } from './PayoutDetailsDto';
import {
    PayoutDetailsDtoFromJSON,
    PayoutDetailsDtoFromJSONTyped,
    PayoutDetailsDtoToJSON,
} from './PayoutDetailsDto';
import type { RegistrationDetailedDto } from './RegistrationDetailedDto';
import {
    RegistrationDetailedDtoFromJSON,
    RegistrationDetailedDtoFromJSONTyped,
    RegistrationDetailedDtoToJSON,
} from './RegistrationDetailedDto';
import type { StateType } from './StateType';
import {
    StateTypeFromJSON,
    StateTypeFromJSONTyped,
    StateTypeToJSON,
} from './StateType';
import type { VenueDetailsDto } from './VenueDetailsDto';
import {
    VenueDetailsDtoFromJSON,
    VenueDetailsDtoFromJSONTyped,
    VenueDetailsDtoToJSON,
} from './VenueDetailsDto';

/**
 * 
 * @export
 * @interface EventDetailsDto
 */
export interface EventDetailsDto {
    /**
     * 
     * @type {string}
     * @memberof EventDetailsDto
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDetailsDto
     */
    festivalId?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDetailsDto
     */
    venueId?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDetailsDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDetailsDto
     */
    thmId?: string;
    /**
     * 
     * @type {StateType}
     * @memberof EventDetailsDto
     */
    state?: StateType;
    /**
     * 
     * @type {string}
     * @memberof EventDetailsDto
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDetailsDto
     */
    summary?: string;
    /**
     * 
     * @type {number}
     * @memberof EventDetailsDto
     */
    priority?: number;
    /**
     * 
     * @type {Date}
     * @memberof EventDetailsDto
     */
    fromDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EventDetailsDto
     */
    toDate?: Date;
    /**
     * 
     * @type {EventMetaDto}
     * @memberof EventDetailsDto
     */
    meta?: EventMetaDto;
    /**
     * 
     * @type {EventStatisticsDto}
     * @memberof EventDetailsDto
     */
    statistics?: EventStatisticsDto;
    /**
     * 
     * @type {VenueDetailsDto}
     * @memberof EventDetailsDto
     */
    venue?: VenueDetailsDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof EventDetailsDto
     */
    photos?: Array<string>;
    /**
     * 
     * @type {FestivalDetailsDto}
     * @memberof EventDetailsDto
     */
    festival?: FestivalDetailsDto;
    /**
     * 
     * @type {Array<DayEntity>}
     * @memberof EventDetailsDto
     */
    days?: Array<DayEntity>;
    /**
     * 
     * @type {Array<BlindLevelDto>}
     * @memberof EventDetailsDto
     */
    blindLevels?: Array<BlindLevelDto>;
    /**
     * 
     * @type {Array<PayoutDetailsDto>}
     * @memberof EventDetailsDto
     */
    payouts?: Array<PayoutDetailsDto>;
    /**
     * 
     * @type {Array<RegistrationDetailedDto>}
     * @memberof EventDetailsDto
     */
    registrations?: Array<RegistrationDetailedDto>;
    /**
     * 
     * @type {Array<LiveReportingSummaryDto>}
     * @memberof EventDetailsDto
     */
    liveReportings?: Array<LiveReportingSummaryDto>;
}

/**
 * Check if a given object implements the EventDetailsDto interface.
 */
export function instanceOfEventDetailsDto(value: object): boolean {
    return true;
}

export function EventDetailsDtoFromJSON(json: any): EventDetailsDto {
    return EventDetailsDtoFromJSONTyped(json, false);
}

export function EventDetailsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventDetailsDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'festivalId': json['festivalId'] == null ? undefined : json['festivalId'],
        'venueId': json['venueId'] == null ? undefined : json['venueId'],
        'name': json['name'] == null ? undefined : json['name'],
        'thmId': json['thmId'] == null ? undefined : json['thmId'],
        'state': json['state'] == null ? undefined : StateTypeFromJSON(json['state']),
        'description': json['description'] == null ? undefined : json['description'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'priority': json['priority'] == null ? undefined : json['priority'],
        'fromDate': json['fromDate'] == null ? undefined : (new Date(json['fromDate'])),
        'toDate': json['toDate'] == null ? undefined : (new Date(json['toDate'])),
        'meta': json['meta'] == null ? undefined : EventMetaDtoFromJSON(json['meta']),
        'statistics': json['statistics'] == null ? undefined : EventStatisticsDtoFromJSON(json['statistics']),
        'venue': json['venue'] == null ? undefined : VenueDetailsDtoFromJSON(json['venue']),
        'photos': json['photos'] == null ? undefined : json['photos'],
        'festival': json['festival'] == null ? undefined : FestivalDetailsDtoFromJSON(json['festival']),
        'days': json['days'] == null ? undefined : ((json['days'] as Array<any>).map(DayEntityFromJSON)),
        'blindLevels': json['blindLevels'] == null ? undefined : ((json['blindLevels'] as Array<any>).map(BlindLevelDtoFromJSON)),
        'payouts': json['payouts'] == null ? undefined : ((json['payouts'] as Array<any>).map(PayoutDetailsDtoFromJSON)),
        'registrations': json['registrations'] == null ? undefined : ((json['registrations'] as Array<any>).map(RegistrationDetailedDtoFromJSON)),
        'liveReportings': json['liveReportings'] == null ? undefined : ((json['liveReportings'] as Array<any>).map(LiveReportingSummaryDtoFromJSON)),
    };
}

export function EventDetailsDtoToJSON(value?: EventDetailsDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'festivalId': value['festivalId'],
        'venueId': value['venueId'],
        'name': value['name'],
        'thmId': value['thmId'],
        'state': StateTypeToJSON(value['state']),
        'description': value['description'],
        'summary': value['summary'],
        'priority': value['priority'],
        'fromDate': value['fromDate'] == null ? undefined : ((value['fromDate']).toISOString().substring(0,10)),
        'toDate': value['toDate'] == null ? undefined : ((value['toDate']).toISOString().substring(0,10)),
        'meta': EventMetaDtoToJSON(value['meta']),
        'statistics': EventStatisticsDtoToJSON(value['statistics']),
        'venue': VenueDetailsDtoToJSON(value['venue']),
        'photos': value['photos'],
        'festival': FestivalDetailsDtoToJSON(value['festival']),
        'days': value['days'] == null ? undefined : ((value['days'] as Array<any>).map(DayEntityToJSON)),
        'blindLevels': value['blindLevels'] == null ? undefined : ((value['blindLevels'] as Array<any>).map(BlindLevelDtoToJSON)),
        'payouts': value['payouts'] == null ? undefined : ((value['payouts'] as Array<any>).map(PayoutDetailsDtoToJSON)),
        'registrations': value['registrations'] == null ? undefined : ((value['registrations'] as Array<any>).map(RegistrationDetailedDtoToJSON)),
        'liveReportings': value['liveReportings'] == null ? undefined : ((value['liveReportings'] as Array<any>).map(LiveReportingSummaryDtoToJSON)),
    };
}

