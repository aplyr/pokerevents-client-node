/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { StateType } from './StateType';
import {
    StateTypeFromJSON,
    StateTypeFromJSONTyped,
    StateTypeToJSON,
} from './StateType';

/**
 * 
 * @export
 * @interface EventSummaryDto
 */
export interface EventSummaryDto {
    /**
     * 
     * @type {string}
     * @memberof EventSummaryDto
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EventSummaryDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EventSummaryDto
     */
    thmId?: string;
    /**
     * 
     * @type {StateType}
     * @memberof EventSummaryDto
     */
    state?: StateType;
    /**
     * 
     * @type {number}
     * @memberof EventSummaryDto
     */
    priority?: number;
    /**
     * 
     * @type {Date}
     * @memberof EventSummaryDto
     */
    fromDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EventSummaryDto
     */
    toDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof EventSummaryDto
     */
    festivalId?: string;
    /**
     * 
     * @type {string}
     * @memberof EventSummaryDto
     */
    festivalName?: string;
    /**
     * 
     * @type {string}
     * @memberof EventSummaryDto
     */
    festivalThmId?: string;
    /**
     * 
     * @type {string}
     * @memberof EventSummaryDto
     */
    venueId?: string;
    /**
     * 
     * @type {string}
     * @memberof EventSummaryDto
     */
    venueName?: string;
    /**
     * 
     * @type {string}
     * @memberof EventSummaryDto
     */
    venueThmId?: string;
    /**
     * 
     * @type {number}
     * @memberof EventSummaryDto
     */
    daysCount?: number;
    /**
     * 
     * @type {number}
     * @memberof EventSummaryDto
     */
    registrationsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof EventSummaryDto
     */
    liveReportingsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof EventSummaryDto
     */
    blindLevelsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof EventSummaryDto
     */
    payoutsCount?: number;
}

/**
 * Check if a given object implements the EventSummaryDto interface.
 */
export function instanceOfEventSummaryDto(value: object): boolean {
    return true;
}

export function EventSummaryDtoFromJSON(json: any): EventSummaryDto {
    return EventSummaryDtoFromJSONTyped(json, false);
}

export function EventSummaryDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventSummaryDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'thmId': json['thmId'] == null ? undefined : json['thmId'],
        'state': json['state'] == null ? undefined : StateTypeFromJSON(json['state']),
        'priority': json['priority'] == null ? undefined : json['priority'],
        'fromDate': json['fromDate'] == null ? undefined : (new Date(json['fromDate'])),
        'toDate': json['toDate'] == null ? undefined : (new Date(json['toDate'])),
        'festivalId': json['festivalId'] == null ? undefined : json['festivalId'],
        'festivalName': json['festivalName'] == null ? undefined : json['festivalName'],
        'festivalThmId': json['festivalThmId'] == null ? undefined : json['festivalThmId'],
        'venueId': json['venueId'] == null ? undefined : json['venueId'],
        'venueName': json['venueName'] == null ? undefined : json['venueName'],
        'venueThmId': json['venueThmId'] == null ? undefined : json['venueThmId'],
        'daysCount': json['daysCount'] == null ? undefined : json['daysCount'],
        'registrationsCount': json['registrationsCount'] == null ? undefined : json['registrationsCount'],
        'liveReportingsCount': json['liveReportingsCount'] == null ? undefined : json['liveReportingsCount'],
        'blindLevelsCount': json['blindLevelsCount'] == null ? undefined : json['blindLevelsCount'],
        'payoutsCount': json['payoutsCount'] == null ? undefined : json['payoutsCount'],
    };
}

export function EventSummaryDtoToJSON(value?: EventSummaryDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'thmId': value['thmId'],
        'state': StateTypeToJSON(value['state']),
        'priority': value['priority'],
        'fromDate': value['fromDate'] == null ? undefined : ((value['fromDate']).toISOString().substring(0,10)),
        'toDate': value['toDate'] == null ? undefined : ((value['toDate']).toISOString().substring(0,10)),
        'festivalId': value['festivalId'],
        'festivalName': value['festivalName'],
        'festivalThmId': value['festivalThmId'],
        'venueId': value['venueId'],
        'venueName': value['venueName'],
        'venueThmId': value['venueThmId'],
        'daysCount': value['daysCount'],
        'registrationsCount': value['registrationsCount'],
        'liveReportingsCount': value['liveReportingsCount'],
        'blindLevelsCount': value['blindLevelsCount'],
        'payoutsCount': value['payoutsCount'],
    };
}

