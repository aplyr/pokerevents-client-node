/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BlindLevelType } from './BlindLevelType';
import {
    BlindLevelTypeFromJSON,
    BlindLevelTypeFromJSONTyped,
    BlindLevelTypeToJSON,
} from './BlindLevelType';

/**
 * 
 * @export
 * @interface BlindLevelEntity
 */
export interface BlindLevelEntity {
    /**
     * 
     * @type {string}
     * @memberof BlindLevelEntity
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BlindLevelEntity
     */
    eventId?: string;
    /**
     * 
     * @type {BlindLevelType}
     * @memberof BlindLevelEntity
     */
    type?: BlindLevelType;
    /**
     * 
     * @type {number}
     * @memberof BlindLevelEntity
     */
    order?: number;
    /**
     * 
     * @type {number}
     * @memberof BlindLevelEntity
     */
    number?: number;
    /**
     * 
     * @type {string}
     * @memberof BlindLevelEntity
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BlindLevelEntity
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof BlindLevelEntity
     */
    smallBlind?: number;
    /**
     * 
     * @type {number}
     * @memberof BlindLevelEntity
     */
    bigBlind?: number;
    /**
     * 
     * @type {number}
     * @memberof BlindLevelEntity
     */
    ante?: number;
    /**
     * 
     * @type {number}
     * @memberof BlindLevelEntity
     */
    durationInMinutes?: number;
}

/**
 * Check if a given object implements the BlindLevelEntity interface.
 */
export function instanceOfBlindLevelEntity(value: object): boolean {
    return true;
}

export function BlindLevelEntityFromJSON(json: any): BlindLevelEntity {
    return BlindLevelEntityFromJSONTyped(json, false);
}

export function BlindLevelEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlindLevelEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'eventId': json['eventId'] == null ? undefined : json['eventId'],
        'type': json['type'] == null ? undefined : BlindLevelTypeFromJSON(json['type']),
        'order': json['order'] == null ? undefined : json['order'],
        'number': json['number'] == null ? undefined : json['number'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'smallBlind': json['smallBlind'] == null ? undefined : json['smallBlind'],
        'bigBlind': json['bigBlind'] == null ? undefined : json['bigBlind'],
        'ante': json['ante'] == null ? undefined : json['ante'],
        'durationInMinutes': json['durationInMinutes'] == null ? undefined : json['durationInMinutes'],
    };
}

export function BlindLevelEntityToJSON(value?: BlindLevelEntity | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'eventId': value['eventId'],
        'type': BlindLevelTypeToJSON(value['type']),
        'order': value['order'],
        'number': value['number'],
        'name': value['name'],
        'description': value['description'],
        'smallBlind': value['smallBlind'],
        'bigBlind': value['bigBlind'],
        'ante': value['ante'],
        'durationInMinutes': value['durationInMinutes'],
    };
}

