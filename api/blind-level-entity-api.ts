/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { BlindLevelEntity } from '../models';
/**
 * BlindLevelEntityApi - axios parameter creator
 * @export
 */
export const BlindLevelEntityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BlindLevelEntity} blindLevelEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlindLevelEntity: async (blindLevelEntity: BlindLevelEntity, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blindLevelEntity' is not null or undefined
            assertParamExists('createBlindLevelEntity', 'blindLevelEntity', blindLevelEntity)
            const localVarPath = `/api/BlindLevelEntity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blindLevelEntity, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<BlindLevelEntity>} blindLevelEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlindLevelEntityBatch: async (blindLevelEntity: Array<BlindLevelEntity>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blindLevelEntity' is not null or undefined
            assertParamExists('createBlindLevelEntityBatch', 'blindLevelEntity', blindLevelEntity)
            const localVarPath = `/api/BlindLevelEntity/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blindLevelEntity, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlindLevelEntity: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBlindLevelEntity', 'id', id)
            const localVarPath = `/api/BlindLevelEntity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [eventId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBlindLevelEntities: async (eventId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BlindLevelEntity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eventId !== undefined) {
                localVarQueryParameter['eventId'] = eventId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlindLevelEntityById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBlindLevelEntityById', 'id', id)
            const localVarPath = `/api/BlindLevelEntity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {BlindLevelEntity} blindLevelEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBlindLevelEntity: async (id: string, blindLevelEntity: BlindLevelEntity, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBlindLevelEntity', 'id', id)
            // verify required parameter 'blindLevelEntity' is not null or undefined
            assertParamExists('updateBlindLevelEntity', 'blindLevelEntity', blindLevelEntity)
            const localVarPath = `/api/BlindLevelEntity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blindLevelEntity, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlindLevelEntityApi - functional programming interface
 * @export
 */
export const BlindLevelEntityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlindLevelEntityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BlindLevelEntity} blindLevelEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBlindLevelEntity(blindLevelEntity: BlindLevelEntity, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlindLevelEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBlindLevelEntity(blindLevelEntity, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlindLevelEntityApi.createBlindLevelEntity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<BlindLevelEntity>} blindLevelEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBlindLevelEntityBatch(blindLevelEntity: Array<BlindLevelEntity>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBlindLevelEntityBatch(blindLevelEntity, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlindLevelEntityApi.createBlindLevelEntityBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlindLevelEntity(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlindLevelEntity(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlindLevelEntityApi.deleteBlindLevelEntity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [eventId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBlindLevelEntities(eventId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlindLevelEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBlindLevelEntities(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlindLevelEntityApi.getAllBlindLevelEntities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlindLevelEntityById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlindLevelEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlindLevelEntityById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlindLevelEntityApi.getBlindLevelEntityById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {BlindLevelEntity} blindLevelEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBlindLevelEntity(id: string, blindLevelEntity: BlindLevelEntity, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBlindLevelEntity(id, blindLevelEntity, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlindLevelEntityApi.updateBlindLevelEntity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BlindLevelEntityApi - factory interface
 * @export
 */
export const BlindLevelEntityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlindLevelEntityApiFp(configuration)
    return {
        /**
         * 
         * @param {BlindLevelEntity} blindLevelEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlindLevelEntity(blindLevelEntity: BlindLevelEntity, options?: any): AxiosPromise<BlindLevelEntity> {
            return localVarFp.createBlindLevelEntity(blindLevelEntity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<BlindLevelEntity>} blindLevelEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlindLevelEntityBatch(blindLevelEntity: Array<BlindLevelEntity>, options?: any): AxiosPromise<void> {
            return localVarFp.createBlindLevelEntityBatch(blindLevelEntity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlindLevelEntity(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBlindLevelEntity(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [eventId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBlindLevelEntities(eventId?: string, options?: any): AxiosPromise<Array<BlindLevelEntity>> {
            return localVarFp.getAllBlindLevelEntities(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlindLevelEntityById(id: string, options?: any): AxiosPromise<BlindLevelEntity> {
            return localVarFp.getBlindLevelEntityById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {BlindLevelEntity} blindLevelEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBlindLevelEntity(id: string, blindLevelEntity: BlindLevelEntity, options?: any): AxiosPromise<void> {
            return localVarFp.updateBlindLevelEntity(id, blindLevelEntity, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlindLevelEntityApi - object-oriented interface
 * @export
 * @class BlindLevelEntityApi
 * @extends {BaseAPI}
 */
export class BlindLevelEntityApi extends BaseAPI {
    /**
     * 
     * @param {BlindLevelEntity} blindLevelEntity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlindLevelEntityApi
     */
    public createBlindLevelEntity(blindLevelEntity: BlindLevelEntity, options?: RawAxiosRequestConfig) {
        return BlindLevelEntityApiFp(this.configuration).createBlindLevelEntity(blindLevelEntity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<BlindLevelEntity>} blindLevelEntity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlindLevelEntityApi
     */
    public createBlindLevelEntityBatch(blindLevelEntity: Array<BlindLevelEntity>, options?: RawAxiosRequestConfig) {
        return BlindLevelEntityApiFp(this.configuration).createBlindLevelEntityBatch(blindLevelEntity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlindLevelEntityApi
     */
    public deleteBlindLevelEntity(id: string, options?: RawAxiosRequestConfig) {
        return BlindLevelEntityApiFp(this.configuration).deleteBlindLevelEntity(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [eventId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlindLevelEntityApi
     */
    public getAllBlindLevelEntities(eventId?: string, options?: RawAxiosRequestConfig) {
        return BlindLevelEntityApiFp(this.configuration).getAllBlindLevelEntities(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlindLevelEntityApi
     */
    public getBlindLevelEntityById(id: string, options?: RawAxiosRequestConfig) {
        return BlindLevelEntityApiFp(this.configuration).getBlindLevelEntityById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {BlindLevelEntity} blindLevelEntity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlindLevelEntityApi
     */
    public updateBlindLevelEntity(id: string, blindLevelEntity: BlindLevelEntity, options?: RawAxiosRequestConfig) {
        return BlindLevelEntityApiFp(this.configuration).updateBlindLevelEntity(id, blindLevelEntity, options).then((request) => request(this.axios, this.basePath));
    }
}

