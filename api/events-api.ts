/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ChipCountUpdateDto } from '../models';
// @ts-ignore
import { EventBasicDetailsRequest } from '../models';
// @ts-ignore
import { EventDetailsDto } from '../models';
// @ts-ignore
import { EventMetaDto } from '../models';
// @ts-ignore
import { EventStatisticsDto } from '../models';
// @ts-ignore
import { EventSummaryDto } from '../models';
// @ts-ignore
import { LiveReportingBasicDetailsRequest } from '../models';
// @ts-ignore
import { LiveReportingDetailsDto } from '../models';
// @ts-ignore
import { PlayerInEventDto } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { RegistrationRequest } from '../models';
// @ts-ignore
import { Result } from '../models';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} eventId 
         * @param {Array<ChipCountUpdateDto>} [chipCountUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdChipCountsPost: async (eventId: string, chipCountUpdateDto?: Array<ChipCountUpdateDto>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiEventsEventIdChipCountsPost', 'eventId', eventId)
            const localVarPath = `/api/Events/{eventId}/ChipCounts`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chipCountUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdDelete: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiEventsEventIdDelete', 'eventId', eventId)
            const localVarPath = `/api/Events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdGet: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiEventsEventIdGet', 'eventId', eventId)
            const localVarPath = `/api/Events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {LiveReportingBasicDetailsRequest} [liveReportingBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdLiveReportingsPost: async (eventId: string, liveReportingBasicDetailsRequest?: LiveReportingBasicDetailsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiEventsEventIdLiveReportingsPost', 'eventId', eventId)
            const localVarPath = `/api/Events/{eventId}/LiveReportings`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(liveReportingBasicDetailsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {EventMetaDto} [eventMetaDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdMetaPut: async (eventId: string, eventMetaDto?: EventMetaDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiEventsEventIdMetaPut', 'eventId', eventId)
            const localVarPath = `/api/Events/{eventId}/Meta`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventMetaDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdPlayersGet: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiEventsEventIdPlayersGet', 'eventId', eventId)
            const localVarPath = `/api/Events/{eventId}/Players`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {PlayerInEventDto} [playerInEventDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdPlayersPost: async (eventId: string, playerInEventDto?: PlayerInEventDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiEventsEventIdPlayersPost', 'eventId', eventId)
            const localVarPath = `/api/Events/{eventId}/Players`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerInEventDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {EventBasicDetailsRequest} [eventBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdPut: async (eventId: string, eventBasicDetailsRequest?: EventBasicDetailsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiEventsEventIdPut', 'eventId', eventId)
            const localVarPath = `/api/Events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventBasicDetailsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {Array<RegistrationRequest>} [registrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdRegistrationsPost: async (eventId: string, registrationRequest?: Array<RegistrationRequest>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiEventsEventIdRegistrationsPost', 'eventId', eventId)
            const localVarPath = `/api/Events/{eventId}/Registrations`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {EventStatisticsDto} [eventStatisticsDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdStatisticsPut: async (eventId: string, eventStatisticsDto?: EventStatisticsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiEventsEventIdStatisticsPut', 'eventId', eventId)
            const localVarPath = `/api/Events/{eventId}/Statistics`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventStatisticsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {string} [festivalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsGet: async (pageSize?: number, page?: number, festivalId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (festivalId !== undefined) {
                localVarQueryParameter['festivalId'] = festivalId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EventBasicDetailsRequest} [eventBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsPost: async (eventBasicDetailsRequest?: EventBasicDetailsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventBasicDetailsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} eventId 
         * @param {Array<ChipCountUpdateDto>} [chipCountUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsEventIdChipCountsPost(eventId: string, chipCountUpdateDto?: Array<ChipCountUpdateDto>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsEventIdChipCountsPost(eventId, chipCountUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsEventIdChipCountsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsEventIdDelete(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsEventIdDelete(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsEventIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsEventIdGet(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsEventIdGet(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsEventIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {LiveReportingBasicDetailsRequest} [liveReportingBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsEventIdLiveReportingsPost(eventId: string, liveReportingBasicDetailsRequest?: LiveReportingBasicDetailsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveReportingDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsEventIdLiveReportingsPost(eventId, liveReportingBasicDetailsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsEventIdLiveReportingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {EventMetaDto} [eventMetaDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsEventIdMetaPut(eventId: string, eventMetaDto?: EventMetaDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsEventIdMetaPut(eventId, eventMetaDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsEventIdMetaPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsEventIdPlayersGet(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayerInEventDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsEventIdPlayersGet(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsEventIdPlayersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {PlayerInEventDto} [playerInEventDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsEventIdPlayersPost(eventId: string, playerInEventDto?: PlayerInEventDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsEventIdPlayersPost(eventId, playerInEventDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsEventIdPlayersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {EventBasicDetailsRequest} [eventBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsEventIdPut(eventId: string, eventBasicDetailsRequest?: EventBasicDetailsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsEventIdPut(eventId, eventBasicDetailsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsEventIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {Array<RegistrationRequest>} [registrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsEventIdRegistrationsPost(eventId: string, registrationRequest?: Array<RegistrationRequest>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsEventIdRegistrationsPost(eventId, registrationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsEventIdRegistrationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {EventStatisticsDto} [eventStatisticsDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsEventIdStatisticsPut(eventId: string, eventStatisticsDto?: EventStatisticsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsEventIdStatisticsPut(eventId, eventStatisticsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsEventIdStatisticsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {string} [festivalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsGet(pageSize?: number, page?: number, festivalId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventSummaryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsGet(pageSize, page, festivalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EventBasicDetailsRequest} [eventBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEventsPost(eventBasicDetailsRequest?: EventBasicDetailsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEventsPost(eventBasicDetailsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.apiEventsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} eventId 
         * @param {Array<ChipCountUpdateDto>} [chipCountUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdChipCountsPost(eventId: string, chipCountUpdateDto?: Array<ChipCountUpdateDto>, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventsEventIdChipCountsPost(eventId, chipCountUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdDelete(eventId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventsEventIdDelete(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdGet(eventId: string, options?: any): AxiosPromise<EventDetailsDto> {
            return localVarFp.apiEventsEventIdGet(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {LiveReportingBasicDetailsRequest} [liveReportingBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdLiveReportingsPost(eventId: string, liveReportingBasicDetailsRequest?: LiveReportingBasicDetailsRequest, options?: any): AxiosPromise<LiveReportingDetailsDto> {
            return localVarFp.apiEventsEventIdLiveReportingsPost(eventId, liveReportingBasicDetailsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {EventMetaDto} [eventMetaDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdMetaPut(eventId: string, eventMetaDto?: EventMetaDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventsEventIdMetaPut(eventId, eventMetaDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdPlayersGet(eventId: string, options?: any): AxiosPromise<Array<PlayerInEventDto>> {
            return localVarFp.apiEventsEventIdPlayersGet(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {PlayerInEventDto} [playerInEventDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdPlayersPost(eventId: string, playerInEventDto?: PlayerInEventDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventsEventIdPlayersPost(eventId, playerInEventDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {EventBasicDetailsRequest} [eventBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdPut(eventId: string, eventBasicDetailsRequest?: EventBasicDetailsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventsEventIdPut(eventId, eventBasicDetailsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {Array<RegistrationRequest>} [registrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdRegistrationsPost(eventId: string, registrationRequest?: Array<RegistrationRequest>, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventsEventIdRegistrationsPost(eventId, registrationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {EventStatisticsDto} [eventStatisticsDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsEventIdStatisticsPut(eventId: string, eventStatisticsDto?: EventStatisticsDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiEventsEventIdStatisticsPut(eventId, eventStatisticsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {string} [festivalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsGet(pageSize?: number, page?: number, festivalId?: string, options?: any): AxiosPromise<Array<EventSummaryDto>> {
            return localVarFp.apiEventsGet(pageSize, page, festivalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventBasicDetailsRequest} [eventBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEventsPost(eventBasicDetailsRequest?: EventBasicDetailsRequest, options?: any): AxiosPromise<EventDetailsDto> {
            return localVarFp.apiEventsPost(eventBasicDetailsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * 
     * @param {string} eventId 
     * @param {Array<ChipCountUpdateDto>} [chipCountUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsEventIdChipCountsPost(eventId: string, chipCountUpdateDto?: Array<ChipCountUpdateDto>, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsEventIdChipCountsPost(eventId, chipCountUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsEventIdDelete(eventId: string, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsEventIdDelete(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsEventIdGet(eventId: string, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsEventIdGet(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {LiveReportingBasicDetailsRequest} [liveReportingBasicDetailsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsEventIdLiveReportingsPost(eventId: string, liveReportingBasicDetailsRequest?: LiveReportingBasicDetailsRequest, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsEventIdLiveReportingsPost(eventId, liveReportingBasicDetailsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {EventMetaDto} [eventMetaDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsEventIdMetaPut(eventId: string, eventMetaDto?: EventMetaDto, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsEventIdMetaPut(eventId, eventMetaDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsEventIdPlayersGet(eventId: string, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsEventIdPlayersGet(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {PlayerInEventDto} [playerInEventDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsEventIdPlayersPost(eventId: string, playerInEventDto?: PlayerInEventDto, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsEventIdPlayersPost(eventId, playerInEventDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {EventBasicDetailsRequest} [eventBasicDetailsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsEventIdPut(eventId: string, eventBasicDetailsRequest?: EventBasicDetailsRequest, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsEventIdPut(eventId, eventBasicDetailsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {Array<RegistrationRequest>} [registrationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsEventIdRegistrationsPost(eventId: string, registrationRequest?: Array<RegistrationRequest>, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsEventIdRegistrationsPost(eventId, registrationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {EventStatisticsDto} [eventStatisticsDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsEventIdStatisticsPut(eventId: string, eventStatisticsDto?: EventStatisticsDto, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsEventIdStatisticsPut(eventId, eventStatisticsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {string} [festivalId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsGet(pageSize?: number, page?: number, festivalId?: string, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsGet(pageSize, page, festivalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventBasicDetailsRequest} [eventBasicDetailsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiEventsPost(eventBasicDetailsRequest?: EventBasicDetailsRequest, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).apiEventsPost(eventBasicDetailsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

