/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ChipCountDetailedDto } from '../models';
// @ts-ignore
import { ChipCountDto } from '../models';
// @ts-ignore
import { Result } from '../models';
/**
 * ChipCountUpdateApi - axios parameter creator
 * @export
 */
export const ChipCountUpdateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} registrationId 
         * @param {string} chipCountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChipCountUpdateRegistrationIdChipCountIdDelete: async (registrationId: string, chipCountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationId' is not null or undefined
            assertParamExists('apiChipCountUpdateRegistrationIdChipCountIdDelete', 'registrationId', registrationId)
            // verify required parameter 'chipCountId' is not null or undefined
            assertParamExists('apiChipCountUpdateRegistrationIdChipCountIdDelete', 'chipCountId', chipCountId)
            const localVarPath = `/api/ChipCountUpdate/{registrationId}/{chipCountId}`
                .replace(`{${"registrationId"}}`, encodeURIComponent(String(registrationId)))
                .replace(`{${"chipCountId"}}`, encodeURIComponent(String(chipCountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} registrationId 
         * @param {string} chipCountId 
         * @param {ChipCountDto} [chipCountDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChipCountUpdateRegistrationIdChipCountIdPut: async (registrationId: string, chipCountId: string, chipCountDto?: ChipCountDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationId' is not null or undefined
            assertParamExists('apiChipCountUpdateRegistrationIdChipCountIdPut', 'registrationId', registrationId)
            // verify required parameter 'chipCountId' is not null or undefined
            assertParamExists('apiChipCountUpdateRegistrationIdChipCountIdPut', 'chipCountId', chipCountId)
            const localVarPath = `/api/ChipCountUpdate/{registrationId}/{chipCountId}`
                .replace(`{${"registrationId"}}`, encodeURIComponent(String(registrationId)))
                .replace(`{${"chipCountId"}}`, encodeURIComponent(String(chipCountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chipCountDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} registrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChipCountUpdateRegistrationIdGet: async (registrationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationId' is not null or undefined
            assertParamExists('apiChipCountUpdateRegistrationIdGet', 'registrationId', registrationId)
            const localVarPath = `/api/ChipCountUpdate/{registrationId}`
                .replace(`{${"registrationId"}}`, encodeURIComponent(String(registrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} registrationId 
         * @param {ChipCountDto} [chipCountDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChipCountUpdateRegistrationIdPost: async (registrationId: string, chipCountDto?: ChipCountDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationId' is not null or undefined
            assertParamExists('apiChipCountUpdateRegistrationIdPost', 'registrationId', registrationId)
            const localVarPath = `/api/ChipCountUpdate/{registrationId}`
                .replace(`{${"registrationId"}}`, encodeURIComponent(String(registrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chipCountDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChipCountUpdateApi - functional programming interface
 * @export
 */
export const ChipCountUpdateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChipCountUpdateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} registrationId 
         * @param {string} chipCountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChipCountUpdateRegistrationIdChipCountIdDelete(registrationId: string, chipCountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChipCountUpdateRegistrationIdChipCountIdDelete(registrationId, chipCountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChipCountUpdateApi.apiChipCountUpdateRegistrationIdChipCountIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} registrationId 
         * @param {string} chipCountId 
         * @param {ChipCountDto} [chipCountDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChipCountUpdateRegistrationIdChipCountIdPut(registrationId: string, chipCountId: string, chipCountDto?: ChipCountDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChipCountUpdateRegistrationIdChipCountIdPut(registrationId, chipCountId, chipCountDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChipCountUpdateApi.apiChipCountUpdateRegistrationIdChipCountIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} registrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChipCountUpdateRegistrationIdGet(registrationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChipCountDetailedDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChipCountUpdateRegistrationIdGet(registrationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChipCountUpdateApi.apiChipCountUpdateRegistrationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} registrationId 
         * @param {ChipCountDto} [chipCountDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChipCountUpdateRegistrationIdPost(registrationId: string, chipCountDto?: ChipCountDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChipCountDetailedDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChipCountUpdateRegistrationIdPost(registrationId, chipCountDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChipCountUpdateApi.apiChipCountUpdateRegistrationIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChipCountUpdateApi - factory interface
 * @export
 */
export const ChipCountUpdateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChipCountUpdateApiFp(configuration)
    return {
        /**
         * 
         * @param {string} registrationId 
         * @param {string} chipCountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChipCountUpdateRegistrationIdChipCountIdDelete(registrationId: string, chipCountId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiChipCountUpdateRegistrationIdChipCountIdDelete(registrationId, chipCountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} registrationId 
         * @param {string} chipCountId 
         * @param {ChipCountDto} [chipCountDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChipCountUpdateRegistrationIdChipCountIdPut(registrationId: string, chipCountId: string, chipCountDto?: ChipCountDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiChipCountUpdateRegistrationIdChipCountIdPut(registrationId, chipCountId, chipCountDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} registrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChipCountUpdateRegistrationIdGet(registrationId: string, options?: any): AxiosPromise<Array<ChipCountDetailedDto>> {
            return localVarFp.apiChipCountUpdateRegistrationIdGet(registrationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} registrationId 
         * @param {ChipCountDto} [chipCountDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChipCountUpdateRegistrationIdPost(registrationId: string, chipCountDto?: ChipCountDto, options?: any): AxiosPromise<ChipCountDetailedDto> {
            return localVarFp.apiChipCountUpdateRegistrationIdPost(registrationId, chipCountDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChipCountUpdateApi - object-oriented interface
 * @export
 * @class ChipCountUpdateApi
 * @extends {BaseAPI}
 */
export class ChipCountUpdateApi extends BaseAPI {
    /**
     * 
     * @param {string} registrationId 
     * @param {string} chipCountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChipCountUpdateApi
     */
    public apiChipCountUpdateRegistrationIdChipCountIdDelete(registrationId: string, chipCountId: string, options?: RawAxiosRequestConfig) {
        return ChipCountUpdateApiFp(this.configuration).apiChipCountUpdateRegistrationIdChipCountIdDelete(registrationId, chipCountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} registrationId 
     * @param {string} chipCountId 
     * @param {ChipCountDto} [chipCountDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChipCountUpdateApi
     */
    public apiChipCountUpdateRegistrationIdChipCountIdPut(registrationId: string, chipCountId: string, chipCountDto?: ChipCountDto, options?: RawAxiosRequestConfig) {
        return ChipCountUpdateApiFp(this.configuration).apiChipCountUpdateRegistrationIdChipCountIdPut(registrationId, chipCountId, chipCountDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} registrationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChipCountUpdateApi
     */
    public apiChipCountUpdateRegistrationIdGet(registrationId: string, options?: RawAxiosRequestConfig) {
        return ChipCountUpdateApiFp(this.configuration).apiChipCountUpdateRegistrationIdGet(registrationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} registrationId 
     * @param {ChipCountDto} [chipCountDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChipCountUpdateApi
     */
    public apiChipCountUpdateRegistrationIdPost(registrationId: string, chipCountDto?: ChipCountDto, options?: RawAxiosRequestConfig) {
        return ChipCountUpdateApiFp(this.configuration).apiChipCountUpdateRegistrationIdPost(registrationId, chipCountDto, options).then((request) => request(this.axios, this.basePath));
    }
}

