/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { LiveUpdateDto } from '../models';
// @ts-ignore
import { LiveUpdateRequest } from '../models';
// @ts-ignore
import { Result } from '../models';
/**
 * LiveUpdatesApi - axios parameter creator
 * @export
 */
export const LiveUpdatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [liveReportingId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveUpdatesGet: async (liveReportingId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LiveUpdates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarQueryParameter, "Authorization", configuration)

            if (liveReportingId !== undefined) {
                localVarQueryParameter['liveReportingId'] = liveReportingId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} liveUpdateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveUpdatesLiveUpdateIdDelete: async (liveUpdateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveUpdateId' is not null or undefined
            assertParamExists('apiLiveUpdatesLiveUpdateIdDelete', 'liveUpdateId', liveUpdateId)
            const localVarPath = `/api/LiveUpdates/{liveUpdateId}`
                .replace(`{${"liveUpdateId"}}`, encodeURIComponent(String(liveUpdateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarQueryParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} liveUpdateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveUpdatesLiveUpdateIdGet: async (liveUpdateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveUpdateId' is not null or undefined
            assertParamExists('apiLiveUpdatesLiveUpdateIdGet', 'liveUpdateId', liveUpdateId)
            const localVarPath = `/api/LiveUpdates/{liveUpdateId}`
                .replace(`{${"liveUpdateId"}}`, encodeURIComponent(String(liveUpdateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarQueryParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} liveUpdateId 
         * @param {LiveUpdateRequest} [liveUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveUpdatesLiveUpdateIdPut: async (liveUpdateId: string, liveUpdateRequest?: LiveUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveUpdateId' is not null or undefined
            assertParamExists('apiLiveUpdatesLiveUpdateIdPut', 'liveUpdateId', liveUpdateId)
            const localVarPath = `/api/LiveUpdates/{liveUpdateId}`
                .replace(`{${"liveUpdateId"}}`, encodeURIComponent(String(liveUpdateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarQueryParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(liveUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [liveReportingId] 
         * @param {LiveUpdateRequest} [liveUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveUpdatesPost: async (liveReportingId?: string, liveUpdateRequest?: LiveUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LiveUpdates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarQueryParameter, "Authorization", configuration)

            if (liveReportingId !== undefined) {
                localVarQueryParameter['liveReportingId'] = liveReportingId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(liveUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveUpdatesApi - functional programming interface
 * @export
 */
export const LiveUpdatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveUpdatesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [liveReportingId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiveUpdatesGet(liveReportingId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiveUpdateDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiveUpdatesGet(liveReportingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveUpdatesApi.apiLiveUpdatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} liveUpdateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiveUpdatesLiveUpdateIdDelete(liveUpdateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiveUpdatesLiveUpdateIdDelete(liveUpdateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveUpdatesApi.apiLiveUpdatesLiveUpdateIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} liveUpdateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiveUpdatesLiveUpdateIdGet(liveUpdateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveUpdateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiveUpdatesLiveUpdateIdGet(liveUpdateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveUpdatesApi.apiLiveUpdatesLiveUpdateIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} liveUpdateId 
         * @param {LiveUpdateRequest} [liveUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiveUpdatesLiveUpdateIdPut(liveUpdateId: string, liveUpdateRequest?: LiveUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiveUpdatesLiveUpdateIdPut(liveUpdateId, liveUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveUpdatesApi.apiLiveUpdatesLiveUpdateIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [liveReportingId] 
         * @param {LiveUpdateRequest} [liveUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiveUpdatesPost(liveReportingId?: string, liveUpdateRequest?: LiveUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveUpdateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiveUpdatesPost(liveReportingId, liveUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveUpdatesApi.apiLiveUpdatesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LiveUpdatesApi - factory interface
 * @export
 */
export const LiveUpdatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveUpdatesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [liveReportingId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveUpdatesGet(liveReportingId?: string, options?: any): AxiosPromise<Array<LiveUpdateDto>> {
            return localVarFp.apiLiveUpdatesGet(liveReportingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} liveUpdateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveUpdatesLiveUpdateIdDelete(liveUpdateId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiLiveUpdatesLiveUpdateIdDelete(liveUpdateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} liveUpdateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveUpdatesLiveUpdateIdGet(liveUpdateId: string, options?: any): AxiosPromise<LiveUpdateDto> {
            return localVarFp.apiLiveUpdatesLiveUpdateIdGet(liveUpdateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} liveUpdateId 
         * @param {LiveUpdateRequest} [liveUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveUpdatesLiveUpdateIdPut(liveUpdateId: string, liveUpdateRequest?: LiveUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiLiveUpdatesLiveUpdateIdPut(liveUpdateId, liveUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [liveReportingId] 
         * @param {LiveUpdateRequest} [liveUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveUpdatesPost(liveReportingId?: string, liveUpdateRequest?: LiveUpdateRequest, options?: any): AxiosPromise<LiveUpdateDto> {
            return localVarFp.apiLiveUpdatesPost(liveReportingId, liveUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LiveUpdatesApi - object-oriented interface
 * @export
 * @class LiveUpdatesApi
 * @extends {BaseAPI}
 */
export class LiveUpdatesApi extends BaseAPI {
    /**
     * 
     * @param {string} [liveReportingId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveUpdatesApi
     */
    public apiLiveUpdatesGet(liveReportingId?: string, options?: RawAxiosRequestConfig) {
        return LiveUpdatesApiFp(this.configuration).apiLiveUpdatesGet(liveReportingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} liveUpdateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveUpdatesApi
     */
    public apiLiveUpdatesLiveUpdateIdDelete(liveUpdateId: string, options?: RawAxiosRequestConfig) {
        return LiveUpdatesApiFp(this.configuration).apiLiveUpdatesLiveUpdateIdDelete(liveUpdateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} liveUpdateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveUpdatesApi
     */
    public apiLiveUpdatesLiveUpdateIdGet(liveUpdateId: string, options?: RawAxiosRequestConfig) {
        return LiveUpdatesApiFp(this.configuration).apiLiveUpdatesLiveUpdateIdGet(liveUpdateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} liveUpdateId 
     * @param {LiveUpdateRequest} [liveUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveUpdatesApi
     */
    public apiLiveUpdatesLiveUpdateIdPut(liveUpdateId: string, liveUpdateRequest?: LiveUpdateRequest, options?: RawAxiosRequestConfig) {
        return LiveUpdatesApiFp(this.configuration).apiLiveUpdatesLiveUpdateIdPut(liveUpdateId, liveUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [liveReportingId] 
     * @param {LiveUpdateRequest} [liveUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveUpdatesApi
     */
    public apiLiveUpdatesPost(liveReportingId?: string, liveUpdateRequest?: LiveUpdateRequest, options?: RawAxiosRequestConfig) {
        return LiveUpdatesApiFp(this.configuration).apiLiveUpdatesPost(liveReportingId, liveUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

