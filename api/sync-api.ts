/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ThmSyncRequest } from '../models';
// @ts-ignore
import { ThmSyncResult } from '../models';
/**
 * SyncApi - axios parameter creator
 * @export
 */
export const SyncApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} festivalId 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSyncFestivalsFestivalIdSyncEventsPost: async (festivalId: string, refresh?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'festivalId' is not null or undefined
            assertParamExists('apiSyncFestivalsFestivalIdSyncEventsPost', 'festivalId', festivalId)
            const localVarPath = `/api/Sync/festivals/{festivalId}/sync-events`
                .replace(`{${"festivalId"}}`, encodeURIComponent(String(festivalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarQueryParameter, "Authorization", configuration)

            if (refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} seasonId 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSyncSeasonsSeasonIdSyncFestivalsPost: async (seasonId: string, refresh?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('apiSyncSeasonsSeasonIdSyncFestivalsPost', 'seasonId', seasonId)
            const localVarPath = `/api/Sync/seasons/{seasonId}/sync-festivals`
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarQueryParameter, "Authorization", configuration)

            if (refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [refresh] 
         * @param {ThmSyncRequest} [thmSyncRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSyncSyncToursPost: async (refresh?: boolean, thmSyncRequest?: ThmSyncRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Sync/sync-tours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarQueryParameter, "Authorization", configuration)

            if (refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(thmSyncRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ThmSyncRequest} [thmSyncRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSyncSyncVenuesPost: async (thmSyncRequest?: ThmSyncRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Sync/sync-venues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarQueryParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(thmSyncRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tourId 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSyncToursTourIdSyncSeasonsPost: async (tourId: string, refresh?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tourId' is not null or undefined
            assertParamExists('apiSyncToursTourIdSyncSeasonsPost', 'tourId', tourId)
            const localVarPath = `/api/Sync/tours/{tourId}/sync-seasons`
                .replace(`{${"tourId"}}`, encodeURIComponent(String(tourId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarQueryParameter, "Authorization", configuration)

            if (refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncApi - functional programming interface
 * @export
 */
export const SyncApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} festivalId 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSyncFestivalsFestivalIdSyncEventsPost(festivalId: string, refresh?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThmSyncResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSyncFestivalsFestivalIdSyncEventsPost(festivalId, refresh, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.apiSyncFestivalsFestivalIdSyncEventsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} seasonId 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSyncSeasonsSeasonIdSyncFestivalsPost(seasonId: string, refresh?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThmSyncResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSyncSeasonsSeasonIdSyncFestivalsPost(seasonId, refresh, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.apiSyncSeasonsSeasonIdSyncFestivalsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [refresh] 
         * @param {ThmSyncRequest} [thmSyncRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSyncSyncToursPost(refresh?: boolean, thmSyncRequest?: ThmSyncRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThmSyncResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSyncSyncToursPost(refresh, thmSyncRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.apiSyncSyncToursPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ThmSyncRequest} [thmSyncRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSyncSyncVenuesPost(thmSyncRequest?: ThmSyncRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThmSyncResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSyncSyncVenuesPost(thmSyncRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.apiSyncSyncVenuesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} tourId 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSyncToursTourIdSyncSeasonsPost(tourId: string, refresh?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThmSyncResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSyncToursTourIdSyncSeasonsPost(tourId, refresh, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.apiSyncToursTourIdSyncSeasonsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SyncApi - factory interface
 * @export
 */
export const SyncApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncApiFp(configuration)
    return {
        /**
         * 
         * @param {string} festivalId 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSyncFestivalsFestivalIdSyncEventsPost(festivalId: string, refresh?: boolean, options?: any): AxiosPromise<ThmSyncResult> {
            return localVarFp.apiSyncFestivalsFestivalIdSyncEventsPost(festivalId, refresh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} seasonId 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSyncSeasonsSeasonIdSyncFestivalsPost(seasonId: string, refresh?: boolean, options?: any): AxiosPromise<ThmSyncResult> {
            return localVarFp.apiSyncSeasonsSeasonIdSyncFestivalsPost(seasonId, refresh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [refresh] 
         * @param {ThmSyncRequest} [thmSyncRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSyncSyncToursPost(refresh?: boolean, thmSyncRequest?: ThmSyncRequest, options?: any): AxiosPromise<ThmSyncResult> {
            return localVarFp.apiSyncSyncToursPost(refresh, thmSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ThmSyncRequest} [thmSyncRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSyncSyncVenuesPost(thmSyncRequest?: ThmSyncRequest, options?: any): AxiosPromise<ThmSyncResult> {
            return localVarFp.apiSyncSyncVenuesPost(thmSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tourId 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSyncToursTourIdSyncSeasonsPost(tourId: string, refresh?: boolean, options?: any): AxiosPromise<ThmSyncResult> {
            return localVarFp.apiSyncToursTourIdSyncSeasonsPost(tourId, refresh, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SyncApi - object-oriented interface
 * @export
 * @class SyncApi
 * @extends {BaseAPI}
 */
export class SyncApi extends BaseAPI {
    /**
     * 
     * @param {string} festivalId 
     * @param {boolean} [refresh] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public apiSyncFestivalsFestivalIdSyncEventsPost(festivalId: string, refresh?: boolean, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).apiSyncFestivalsFestivalIdSyncEventsPost(festivalId, refresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} seasonId 
     * @param {boolean} [refresh] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public apiSyncSeasonsSeasonIdSyncFestivalsPost(seasonId: string, refresh?: boolean, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).apiSyncSeasonsSeasonIdSyncFestivalsPost(seasonId, refresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [refresh] 
     * @param {ThmSyncRequest} [thmSyncRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public apiSyncSyncToursPost(refresh?: boolean, thmSyncRequest?: ThmSyncRequest, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).apiSyncSyncToursPost(refresh, thmSyncRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ThmSyncRequest} [thmSyncRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public apiSyncSyncVenuesPost(thmSyncRequest?: ThmSyncRequest, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).apiSyncSyncVenuesPost(thmSyncRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tourId 
     * @param {boolean} [refresh] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public apiSyncToursTourIdSyncSeasonsPost(tourId: string, refresh?: boolean, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).apiSyncToursTourIdSyncSeasonsPost(tourId, refresh, options).then((request) => request(this.axios, this.basePath));
    }
}

