/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { LiveReportingBasicDetailsRequest } from '../models';
// @ts-ignore
import { LiveReportingDetailsDto } from '../models';
// @ts-ignore
import { LiveReportingStatisticsDto } from '../models';
// @ts-ignore
import { LiveReportingSummaryDto } from '../models';
// @ts-ignore
import { LiveUpdateDto } from '../models';
// @ts-ignore
import { LiveUpdateRequest } from '../models';
// @ts-ignore
import { Result } from '../models';
/**
 * LiveReportingsApi - axios parameter creator
 * @export
 */
export const LiveReportingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [eventId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveReportingsGet: async (eventId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LiveReportings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eventId !== undefined) {
                localVarQueryParameter['eventId'] = eventId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveReportingsLiveReportingIdDelete: async (liveReportingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveReportingId' is not null or undefined
            assertParamExists('apiLiveReportingsLiveReportingIdDelete', 'liveReportingId', liveReportingId)
            const localVarPath = `/api/LiveReportings/{liveReportingId}`
                .replace(`{${"liveReportingId"}}`, encodeURIComponent(String(liveReportingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {LiveUpdateRequest} [liveUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveReportingsLiveReportingIdLiveUpdatesPost: async (liveReportingId: string, liveUpdateRequest?: LiveUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveReportingId' is not null or undefined
            assertParamExists('apiLiveReportingsLiveReportingIdLiveUpdatesPost', 'liveReportingId', liveReportingId)
            const localVarPath = `/api/LiveReportings/{liveReportingId}/LiveUpdates`
                .replace(`{${"liveReportingId"}}`, encodeURIComponent(String(liveReportingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(liveUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {LiveReportingBasicDetailsRequest} [liveReportingBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveReportingsLiveReportingIdPut: async (liveReportingId: string, liveReportingBasicDetailsRequest?: LiveReportingBasicDetailsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveReportingId' is not null or undefined
            assertParamExists('apiLiveReportingsLiveReportingIdPut', 'liveReportingId', liveReportingId)
            const localVarPath = `/api/LiveReportings/{liveReportingId}`
                .replace(`{${"liveReportingId"}}`, encodeURIComponent(String(liveReportingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(liveReportingBasicDetailsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {LiveReportingStatisticsDto} [liveReportingStatisticsDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveReportingsLiveReportingIdStatisticsPut: async (liveReportingId: string, liveReportingStatisticsDto?: LiveReportingStatisticsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveReportingId' is not null or undefined
            assertParamExists('apiLiveReportingsLiveReportingIdStatisticsPut', 'liveReportingId', liveReportingId)
            const localVarPath = `/api/LiveReportings/{liveReportingId}/statistics`
                .replace(`{${"liveReportingId"}}`, encodeURIComponent(String(liveReportingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(liveReportingStatisticsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveReporting: async (liveReportingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveReportingId' is not null or undefined
            assertParamExists('getLiveReporting', 'liveReportingId', liveReportingId)
            const localVarPath = `/api/LiveReportings/{liveReportingId}`
                .replace(`{${"liveReportingId"}}`, encodeURIComponent(String(liveReportingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveReportingsApi - functional programming interface
 * @export
 */
export const LiveReportingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveReportingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [eventId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiveReportingsGet(eventId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiveReportingSummaryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiveReportingsGet(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveReportingsApi.apiLiveReportingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiveReportingsLiveReportingIdDelete(liveReportingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiveReportingsLiveReportingIdDelete(liveReportingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveReportingsApi.apiLiveReportingsLiveReportingIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {LiveUpdateRequest} [liveUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiveReportingsLiveReportingIdLiveUpdatesPost(liveReportingId: string, liveUpdateRequest?: LiveUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveUpdateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiveReportingsLiveReportingIdLiveUpdatesPost(liveReportingId, liveUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveReportingsApi.apiLiveReportingsLiveReportingIdLiveUpdatesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {LiveReportingBasicDetailsRequest} [liveReportingBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiveReportingsLiveReportingIdPut(liveReportingId: string, liveReportingBasicDetailsRequest?: LiveReportingBasicDetailsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiveReportingsLiveReportingIdPut(liveReportingId, liveReportingBasicDetailsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveReportingsApi.apiLiveReportingsLiveReportingIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {LiveReportingStatisticsDto} [liveReportingStatisticsDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiveReportingsLiveReportingIdStatisticsPut(liveReportingId: string, liveReportingStatisticsDto?: LiveReportingStatisticsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiveReportingsLiveReportingIdStatisticsPut(liveReportingId, liveReportingStatisticsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveReportingsApi.apiLiveReportingsLiveReportingIdStatisticsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLiveReporting(liveReportingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveReportingDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLiveReporting(liveReportingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiveReportingsApi.getLiveReporting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LiveReportingsApi - factory interface
 * @export
 */
export const LiveReportingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveReportingsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [eventId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveReportingsGet(eventId?: string, options?: any): AxiosPromise<Array<LiveReportingSummaryDto>> {
            return localVarFp.apiLiveReportingsGet(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveReportingsLiveReportingIdDelete(liveReportingId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiLiveReportingsLiveReportingIdDelete(liveReportingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {LiveUpdateRequest} [liveUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveReportingsLiveReportingIdLiveUpdatesPost(liveReportingId: string, liveUpdateRequest?: LiveUpdateRequest, options?: any): AxiosPromise<LiveUpdateDto> {
            return localVarFp.apiLiveReportingsLiveReportingIdLiveUpdatesPost(liveReportingId, liveUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {LiveReportingBasicDetailsRequest} [liveReportingBasicDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveReportingsLiveReportingIdPut(liveReportingId: string, liveReportingBasicDetailsRequest?: LiveReportingBasicDetailsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiLiveReportingsLiveReportingIdPut(liveReportingId, liveReportingBasicDetailsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {LiveReportingStatisticsDto} [liveReportingStatisticsDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiveReportingsLiveReportingIdStatisticsPut(liveReportingId: string, liveReportingStatisticsDto?: LiveReportingStatisticsDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiLiveReportingsLiveReportingIdStatisticsPut(liveReportingId, liveReportingStatisticsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} liveReportingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveReporting(liveReportingId: string, options?: any): AxiosPromise<LiveReportingDetailsDto> {
            return localVarFp.getLiveReporting(liveReportingId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LiveReportingsApi - object-oriented interface
 * @export
 * @class LiveReportingsApi
 * @extends {BaseAPI}
 */
export class LiveReportingsApi extends BaseAPI {
    /**
     * 
     * @param {string} [eventId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveReportingsApi
     */
    public apiLiveReportingsGet(eventId?: string, options?: RawAxiosRequestConfig) {
        return LiveReportingsApiFp(this.configuration).apiLiveReportingsGet(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} liveReportingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveReportingsApi
     */
    public apiLiveReportingsLiveReportingIdDelete(liveReportingId: string, options?: RawAxiosRequestConfig) {
        return LiveReportingsApiFp(this.configuration).apiLiveReportingsLiveReportingIdDelete(liveReportingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} liveReportingId 
     * @param {LiveUpdateRequest} [liveUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveReportingsApi
     */
    public apiLiveReportingsLiveReportingIdLiveUpdatesPost(liveReportingId: string, liveUpdateRequest?: LiveUpdateRequest, options?: RawAxiosRequestConfig) {
        return LiveReportingsApiFp(this.configuration).apiLiveReportingsLiveReportingIdLiveUpdatesPost(liveReportingId, liveUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} liveReportingId 
     * @param {LiveReportingBasicDetailsRequest} [liveReportingBasicDetailsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveReportingsApi
     */
    public apiLiveReportingsLiveReportingIdPut(liveReportingId: string, liveReportingBasicDetailsRequest?: LiveReportingBasicDetailsRequest, options?: RawAxiosRequestConfig) {
        return LiveReportingsApiFp(this.configuration).apiLiveReportingsLiveReportingIdPut(liveReportingId, liveReportingBasicDetailsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} liveReportingId 
     * @param {LiveReportingStatisticsDto} [liveReportingStatisticsDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveReportingsApi
     */
    public apiLiveReportingsLiveReportingIdStatisticsPut(liveReportingId: string, liveReportingStatisticsDto?: LiveReportingStatisticsDto, options?: RawAxiosRequestConfig) {
        return LiveReportingsApiFp(this.configuration).apiLiveReportingsLiveReportingIdStatisticsPut(liveReportingId, liveReportingStatisticsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} liveReportingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveReportingsApi
     */
    public getLiveReporting(liveReportingId: string, options?: RawAxiosRequestConfig) {
        return LiveReportingsApiFp(this.configuration).getLiveReporting(liveReportingId, options).then((request) => request(this.axios, this.basePath));
    }
}

