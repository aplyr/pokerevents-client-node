/* tslint:disable */
/* eslint-disable */
/**
 * PokerEvents.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { FestivalEntity } from '../models';
/**
 * FestivalEntityApi - axios parameter creator
 * @export
 */
export const FestivalEntityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FestivalEntity} festivalEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFestivalEntity: async (festivalEntity: FestivalEntity, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'festivalEntity' is not null or undefined
            assertParamExists('createFestivalEntity', 'festivalEntity', festivalEntity)
            const localVarPath = `/api/FestivalEntity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(festivalEntity, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFestivalEntity: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFestivalEntity', 'id', id)
            const localVarPath = `/api/FestivalEntity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [seasonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFestivalEntities: async (seasonId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FestivalEntity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (seasonId !== undefined) {
                localVarQueryParameter['seasonId'] = seasonId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFestivalEntityById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFestivalEntityById', 'id', id)
            const localVarPath = `/api/FestivalEntity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {FestivalEntity} festivalEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFestivalEntity: async (id: string, festivalEntity: FestivalEntity, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateFestivalEntity', 'id', id)
            // verify required parameter 'festivalEntity' is not null or undefined
            assertParamExists('updateFestivalEntity', 'festivalEntity', festivalEntity)
            const localVarPath = `/api/FestivalEntity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(festivalEntity, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FestivalEntityApi - functional programming interface
 * @export
 */
export const FestivalEntityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FestivalEntityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FestivalEntity} festivalEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFestivalEntity(festivalEntity: FestivalEntity, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FestivalEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFestivalEntity(festivalEntity, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FestivalEntityApi.createFestivalEntity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFestivalEntity(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFestivalEntity(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FestivalEntityApi.deleteFestivalEntity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [seasonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFestivalEntities(seasonId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FestivalEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFestivalEntities(seasonId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FestivalEntityApi.getAllFestivalEntities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFestivalEntityById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FestivalEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFestivalEntityById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FestivalEntityApi.getFestivalEntityById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {FestivalEntity} festivalEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFestivalEntity(id: string, festivalEntity: FestivalEntity, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFestivalEntity(id, festivalEntity, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FestivalEntityApi.updateFestivalEntity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FestivalEntityApi - factory interface
 * @export
 */
export const FestivalEntityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FestivalEntityApiFp(configuration)
    return {
        /**
         * 
         * @param {FestivalEntity} festivalEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFestivalEntity(festivalEntity: FestivalEntity, options?: any): AxiosPromise<FestivalEntity> {
            return localVarFp.createFestivalEntity(festivalEntity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFestivalEntity(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFestivalEntity(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [seasonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFestivalEntities(seasonId?: string, options?: any): AxiosPromise<Array<FestivalEntity>> {
            return localVarFp.getAllFestivalEntities(seasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFestivalEntityById(id: string, options?: any): AxiosPromise<FestivalEntity> {
            return localVarFp.getFestivalEntityById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {FestivalEntity} festivalEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFestivalEntity(id: string, festivalEntity: FestivalEntity, options?: any): AxiosPromise<void> {
            return localVarFp.updateFestivalEntity(id, festivalEntity, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FestivalEntityApi - object-oriented interface
 * @export
 * @class FestivalEntityApi
 * @extends {BaseAPI}
 */
export class FestivalEntityApi extends BaseAPI {
    /**
     * 
     * @param {FestivalEntity} festivalEntity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FestivalEntityApi
     */
    public createFestivalEntity(festivalEntity: FestivalEntity, options?: RawAxiosRequestConfig) {
        return FestivalEntityApiFp(this.configuration).createFestivalEntity(festivalEntity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FestivalEntityApi
     */
    public deleteFestivalEntity(id: string, options?: RawAxiosRequestConfig) {
        return FestivalEntityApiFp(this.configuration).deleteFestivalEntity(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [seasonId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FestivalEntityApi
     */
    public getAllFestivalEntities(seasonId?: string, options?: RawAxiosRequestConfig) {
        return FestivalEntityApiFp(this.configuration).getAllFestivalEntities(seasonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FestivalEntityApi
     */
    public getFestivalEntityById(id: string, options?: RawAxiosRequestConfig) {
        return FestivalEntityApiFp(this.configuration).getFestivalEntityById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {FestivalEntity} festivalEntity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FestivalEntityApi
     */
    public updateFestivalEntity(id: string, festivalEntity: FestivalEntity, options?: RawAxiosRequestConfig) {
        return FestivalEntityApiFp(this.configuration).updateFestivalEntity(id, festivalEntity, options).then((request) => request(this.axios, this.basePath));
    }
}

